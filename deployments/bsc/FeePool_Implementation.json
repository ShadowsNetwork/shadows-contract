{
  "address": "0xC5cF6F9721F585Ecb1083822B0d4C3B3ABfd8847",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePeriodId",
          "type": "uint256"
        }
      ],
      "name": "FeePeriodClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePeriodDuration",
          "type": "uint256"
        }
      ],
      "name": "FeePeriodDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xUSDAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dowsRewards",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtEntryIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePeriodStartingDebtIndex",
          "type": "uint256"
        }
      ],
      "name": "IssuanceDebtRatioEntry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "ResolverUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_REWARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PERIOD_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountIssuanceLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtEntryIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtEntryIndex",
          "type": "uint256"
        }
      ],
      "name": "appendAccountIssuanceRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeCurrentFeePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePeriodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "feesAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "feesByPeriod",
      "outputs": [
        {
          "internalType": "uint256[2][3]",
          "name": "results",
          "type": "uint256[2][3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimingAddress",
          "type": "address"
        }
      ],
      "name": "getLastFeeWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initFeePaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isFeesClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "recentFeePeriods",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "feePeriodId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "startingDebtIndex",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "feesToDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feesClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsToDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordFeePaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordRewardPaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePeriodDuration",
          "type": "uint256"
        }
      ],
      "name": "setFeePeriodDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplierNumber",
          "type": "uint256"
        }
      ],
      "name": "setRewardsMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "setTargetThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f6ba7d73e03f82ad43885c11765f4b8faf940affcf47cd5eb8b13f5d357a29f",
  "receipt": {
    "to": null,
    "from": "0x86fEEC47662304cbcd27160e5e95AEfdC341b806",
    "contractAddress": "0xC5cF6F9721F585Ecb1083822B0d4C3B3ABfd8847",
    "transactionIndex": 302,
    "gasUsed": "2646859",
    "logsBloom": "0x
    "blockHash": "0x418dd05710cf590be4408e0333055482fa0c0dbf1b70478d86e58177fc950270",
    "transactionHash": "0x4f6ba7d73e03f82ad43885c11765f4b8faf940affcf47cd5eb8b13f5d357a29f",
    "logs": [],
    "blockNumber": 12179933,
    "cumulativeGasUsed": "53694155",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "611ad21f2cc27ca1aec47c6161804b2f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePeriodId\",\"type\":\"uint256\"}],\"name\":\"FeePeriodClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"FeePeriodDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dowsRewards\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtEntryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePeriodStartingDebtIndex\",\"type\":\"uint256\"}],\"name\":\"IssuanceDebtRatioEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountIssuanceLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtEntryIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtEntryIndex\",\"type\":\"uint256\"}],\"name\":\"appendAccountIssuanceRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeCurrentFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesByPeriod\",\"outputs\":[{\"internalType\":\"uint256[2][3]\",\"name\":\"results\",\"type\":\"uint256[2][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimingAddress\",\"type\":\"address\"}],\"name\":\"getLastFeeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initFeePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeesClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"recentFeePeriods\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"feePeriodId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startingDebtIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"feesToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordFeePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordRewardPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeFeeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePeriodDuration\",\"type\":\"uint256\"}],\"name\":\"setFeePeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"setRewardsMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTargetThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appendAccountIssuanceRecord(address,uint256,uint256)\":{\"details\":\"onlyIssuer to call me on shadows.issue() & shadows.burn() calls to store the locked DOWS per fee period so we know to allocate the correct proportions of fees and rewards per period\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"closeCurrentFeePeriod()\":{\"notice\":\"Close the current fee period and start a new one.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeePool.sol\":\"FeePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/FeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./library/AddressResolverUpgradeable.sol\\\";\\nimport \\\"./library/SafeDecimalMath.sol\\\";\\nimport \\\"./interfaces/ISynthesizer.sol\\\";\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\n\\ncontract FeePool is\\n    Initializable,\\n    OwnableUpgradeable,\\n    AddressResolverUpgradeable\\n{\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    address public feePool;\\n\\n    // The IssuanceData activity that's happened in a fee period.\\n    struct IssuanceData {\\n        uint256 debtPercentage;\\n        uint256 debtEntryIndex;\\n    }\\n\\n    uint8 public constant FEE_PERIOD_LENGTH = 3;\\n\\n    uint256 public BONUS_REWARDS;\\n\\n    mapping(address => uint256) lastFeeWithdrawalStorage;\\n\\n    // The IssuanceData activity that's happened in a fee period.\\n    mapping(address => IssuanceData[FEE_PERIOD_LENGTH])\\n        public accountIssuanceLedger;\\n\\n    uint256 public exchangeFeeRate;\\n\\n    address public constant FEE_ADDRESS =\\n        0x43707C6Bb6202a5E1007356539a925C052EA9767;\\n\\n    bytes32 private constant xUSD = \\\"ShaUSD\\\";\\n\\n    // This struct represents the issuance activity that's happened in a fee period.\\n    struct FeePeriod {\\n        uint64 feePeriodId;\\n        uint64 startingDebtIndex;\\n        uint64 startTime;\\n        uint256 feesToDistribute;\\n        uint256 feesClaimed;\\n        uint256 rewardsToDistribute;\\n        uint256 rewardsClaimed;\\n    }\\n\\n    FeePeriod[FEE_PERIOD_LENGTH] private _recentFeePeriods;\\n    uint256 private _currentFeePeriod;\\n\\n    uint256 public feePeriodDuration;\\n\\n    // Users are unable to claim fees if their collateralisation ratio drifts out of target treshold\\n    uint256 public targetThreshold;\\n\\n    function initialize(uint256 _exchangeFeeRate, address _resolver)\\n        external\\n        initializer\\n    {\\n        require(\\n            _exchangeFeeRate < SafeDecimalMath.unit() / 10,\\n            \\\"rate < MAX_EXCHANGE_FEE_RATE\\\"\\n        );\\n        __Ownable_init();\\n        __AddressResolver_init(_resolver);\\n        feePeriodDuration = 1 weeks;\\n        exchangeFeeRate = _exchangeFeeRate;\\n        BONUS_REWARDS = 1;\\n    }\\n\\n    function setRewardsMultiplier(uint256 multiplierNumber) public onlyOwner {\\n        BONUS_REWARDS = multiplierNumber;\\n    }\\n\\n    function setExchangeFeeRate(uint256 _exchangeFeeRate) external onlyOwner {\\n        require(\\n            _exchangeFeeRate < SafeDecimalMath.unit() / 10,\\n            \\\"rate < MAX_EXCHANGE_FEE_RATE\\\"\\n        );\\n        exchangeFeeRate = _exchangeFeeRate;\\n    }\\n\\n    function setFeePeriodDuration(uint256 _feePeriodDuration) public onlyOwner {\\n        feePeriodDuration = _feePeriodDuration;\\n        emit FeePeriodDurationUpdated(_feePeriodDuration);\\n    }\\n\\n    function setTargetThreshold(uint256 _percent) public onlyOwner {\\n        require(_percent >= 0, \\\"Threshold should be positive\\\");\\n        require(_percent <= 50, \\\"Threshold too high\\\");\\n        targetThreshold = _percent.mul(SafeDecimalMath.unit()).div(100);\\n    }\\n\\n    function initFeePaid() public onlyOwner {\\n        for (uint256 i = 0; i < FEE_PERIOD_LENGTH; i++) {\\n            delete _recentFeePeriods[i];\\n        }\\n    }\\n\\n    function recordFeePaid(uint256 amount) external onlyExchangerOrSynth {\\n        // Keep track off fees in xUSD in the open fee pool period.\\n        _recentFeePeriodsStorage(0).feesToDistribute = _recentFeePeriodsStorage(\\n            0\\n        )\\n            .feesToDistribute\\n            .add(amount);\\n    }\\n\\n    function recordRewardPaid(uint256 amount) external onlyExchangerOrSynth {\\n        // Keep track off fees in xUSD in the open fee pool period.\\n        _recentFeePeriodsStorage(0).rewardsToDistribute = _recentFeePeriodsStorage(\\n            0\\n        )\\n            .rewardsToDistribute\\n            .add(amount.mul(BONUS_REWARDS));\\n    }\\n\\n    function recentFeePeriods(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint64 feePeriodId,\\n            uint64 startingDebtIndex,\\n            uint64 startTime,\\n            uint256 feesToDistribute,\\n            uint256 feesClaimed,\\n            uint256 rewardsToDistribute,\\n            uint256 rewardsClaimed\\n        )\\n    {\\n        FeePeriod memory feePeriod = _recentFeePeriodsStorage(index);\\n        return (\\n            feePeriod.feePeriodId,\\n            feePeriod.startingDebtIndex,\\n            feePeriod.startTime,\\n            feePeriod.feesToDistribute,\\n            feePeriod.feesClaimed,\\n            feePeriod.rewardsToDistribute,\\n            feePeriod.rewardsClaimed\\n        );\\n    }\\n\\n    /**\\n     * @notice Close the current fee period and start a new one.\\n     */\\n    function closeCurrentFeePeriod() external {\\n        require(\\n            _recentFeePeriodsStorage(0).startTime <= (block.timestamp - feePeriodDuration),\\n            \\\"Too early to close fee period\\\"\\n        );\\n\\n        FeePeriod storage secondLastFeePeriod =\\n            _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2);\\n        FeePeriod storage lastFeePeriod =\\n            _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 1);\\n\\n        // Any unclaimed fees from the last period in the array roll back one period.\\n        // Because of the subtraction here, they're effectively proportionally redistributed to those who\\n        // have already claimed from the old period, available in the new period.\\n        // The subtraction is important so we don't create a ticking time bomb of an ever growing\\n        // number of fees that can never decrease and will eventually overflow at the end of the fee pool.\\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2)\\n            .feesToDistribute = lastFeePeriod\\n            .feesToDistribute\\n            .sub(lastFeePeriod.feesClaimed)\\n            .add(secondLastFeePeriod.feesToDistribute);\\n        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2)\\n            .rewardsToDistribute = lastFeePeriod\\n            .rewardsToDistribute\\n            .sub(lastFeePeriod.rewardsClaimed)\\n            .add(secondLastFeePeriod.rewardsToDistribute);\\n\\n        // Shift the previous fee periods across to make room for the new one.\\n        _currentFeePeriod = _currentFeePeriod.add(FEE_PERIOD_LENGTH).sub(1).mod(\\n            FEE_PERIOD_LENGTH\\n        );\\n\\n        // Clear the first element of the array to make sure we don't have any stale values.\\n        delete _recentFeePeriods[_currentFeePeriod];\\n\\n        // Open up the new fee period.\\n        // Increment periodId from the recent closed period feePeriodId\\n        _recentFeePeriodsStorage(0).feePeriodId = uint64(\\n            uint256(_recentFeePeriodsStorage(1).feePeriodId).add(1)\\n        );\\n        _recentFeePeriodsStorage(0).startingDebtIndex = uint64(\\n            synthesizer().debtLedgerLength()\\n        );\\n        _recentFeePeriodsStorage(0).startTime = uint64(block.timestamp);\\n\\n        emit FeePeriodClosed(_recentFeePeriodsStorage(1).feePeriodId);\\n    }\\n\\n    function claimFees() external returns (bool) {\\n        return _claimFees(_msgSender());\\n    }\\n\\n    function _claimFees(address claimingAddress) internal returns (bool) {\\n        uint256 rewardsPaid = 0;\\n        uint256 feesPaid = 0;\\n        uint256 availableFees;\\n        uint256 availableRewards;\\n\\n        // Address won't be able to claim fees if it is too far below the target c-ratio.\\n        // It will need to burn synths then try claiming again.\\n        require(\\n            isFeesClaimable(claimingAddress),\\n            \\\"C-Ratio below penalty threshold\\\"\\n        );\\n\\n        (availableFees, availableRewards) = feesAvailable(claimingAddress);\\n\\n        require(\\n            availableFees > 0 || availableRewards > 0,\\n            \\\"No fees or rewards available for period, or fees already claimed\\\"\\n        );\\n\\n        _setLastFeeWithdrawal(\\n            claimingAddress,\\n            _recentFeePeriodsStorage(1).feePeriodId\\n        );\\n\\n        if (availableFees > 0) {\\n            feesPaid = _recordFeePayment(availableFees);\\n\\n            _payFees(claimingAddress, feesPaid);\\n        }\\n\\n        if (availableRewards > 0) {\\n            rewardsPaid = _recordRewardPayment(availableRewards);\\n\\n            _payRewards(claimingAddress, rewardsPaid);\\n        }\\n\\n        emit FeesClaimed(claimingAddress, feesPaid, rewardsPaid);\\n\\n        return true;\\n    }\\n\\n    function isFeesClaimable(address account) public view returns (bool) {\\n        // Threshold is calculated from ratio % above the target ratio (issuanceRatio).\\n        //  0  <  10%:   Claimable\\n        // 10% > above:  Unable to claim\\n        uint256 ratio = synthesizer().collateralisationRatio(account);\\n        uint256 targetRatio = synthesizer().issuanceRatio();\\n\\n        if (ratio < targetRatio) {\\n            return true;\\n        }\\n\\n        // Calculate the threshold for collateral ratio before fees can't be claimed.\\n        uint256 ratio_threshold =\\n            targetRatio.multiplyDecimal(\\n                SafeDecimalMath.unit().add(targetThreshold)\\n            );\\n\\n        // Not claimable if collateral ratio above threshold\\n        if (ratio > ratio_threshold) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function feesAvailable(address account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // Add up the fees\\n        uint256[2][FEE_PERIOD_LENGTH] memory userFees = feesByPeriod(account);\\n\\n        uint256 totalFees = 0;\\n        uint256 totalRewards = 0;\\n\\n        // Fees & Rewards in fee period [0] are not yet available for withdrawal\\n        for (uint256 i = 1; i < FEE_PERIOD_LENGTH; i++) {\\n            totalFees = totalFees.add(userFees[i][0]);\\n            totalRewards = totalRewards.add(userFees[i][1]);\\n        }\\n\\n        // And convert totalFees to xUSD\\n        // Return totalRewards as is in DOWS amount\\n        return (totalFees, totalRewards);\\n    }\\n\\n    function feesByPeriod(address account)\\n        public\\n        view\\n        returns (uint256[2][FEE_PERIOD_LENGTH] memory results)\\n    {\\n        // What's the user's debt entry index and the debt they owe to the system at current feePeriod\\n        uint256 userOwnershipPercentage;\\n        uint256 debtEntryIndex;\\n\\n        (userOwnershipPercentage, debtEntryIndex) = _getAccountsDebtEntry(\\n            account,\\n            0\\n        );\\n\\n        // If they don't have any debt ownership and they never minted, they don't have any fees.\\n        // User ownership can reduce to 0 if user burns all synths,\\n        // however they could have fees applicable for periods they had minted in before so we check debtEntryIndex.\\n        if (debtEntryIndex == 0 && userOwnershipPercentage == 0) return results;\\n\\n        // The [0] fee period is not yet ready to claim, but it is a fee period that they can have\\n        // fees owing for, so we need to report on it anyway.\\n        uint256 feesFromPeriod;\\n        uint256 rewardsFromPeriod;\\n        (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(\\n            0,\\n            userOwnershipPercentage,\\n            debtEntryIndex\\n        );\\n\\n        results[0][0] = feesFromPeriod;\\n        results[0][1] = rewardsFromPeriod;\\n\\n        // Retrieve user's last fee claim by periodId\\n        uint256 lastFeeWithdrawal = getLastFeeWithdrawal(account);\\n\\n        // Go through our fee periods from the oldest feePeriod[FEE_PERIOD_LENGTH - 1] and figure out what we owe them.\\n        // Condition checks for periods > 0\\n        for (uint256 i = FEE_PERIOD_LENGTH - 1; i > 0; i--) {\\n            uint256 next = i - 1;\\n            uint256 nextPeriodStartingDebtIndex =\\n                _recentFeePeriodsStorage(next).startingDebtIndex;\\n\\n            // We can skip the period, as no debt minted during period (next period's startingDebtIndex is still 0)\\n            if (\\n                nextPeriodStartingDebtIndex > 0 &&\\n                lastFeeWithdrawal < _recentFeePeriodsStorage(i).feePeriodId\\n            ) {\\n                // We calculate a feePeriod's closingDebtIndex by looking at the next feePeriod's startingDebtIndex\\n                // we can use the most recent issuanceData[0] for the current feePeriod\\n                // else find the applicableIssuanceData for the feePeriod based on the StartingDebtIndex of the period\\n                uint256 closingDebtIndex =\\n                    uint256(nextPeriodStartingDebtIndex).sub(1);\\n\\n                // Gas optimisation - to reuse debtEntryIndex if found new applicable one\\n                // if applicable is 0,0 (none found) we keep most recent one from issuanceData[0]\\n                // return if userOwnershipPercentage = 0)\\n                (\\n                    userOwnershipPercentage,\\n                    debtEntryIndex\\n                ) = _applicableIssuanceData(account, closingDebtIndex);\\n\\n                (feesFromPeriod, rewardsFromPeriod) = _feesAndRewardsFromPeriod(\\n                    i,\\n                    userOwnershipPercentage,\\n                    debtEntryIndex\\n                );\\n\\n                results[i][0] = feesFromPeriod;\\n                results[i][1] = rewardsFromPeriod;\\n            }\\n        }\\n        return results;\\n    }\\n\\n    function getLastFeeWithdrawal(address _claimingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return lastFeeWithdrawalStorage[_claimingAddress];\\n    }\\n\\n    function _setLastFeeWithdrawal(\\n        address _claimingAddress,\\n        uint256 _feePeriodID\\n    ) internal {\\n        lastFeeWithdrawalStorage[_claimingAddress] = _feePeriodID;\\n    }\\n\\n    function _getAccountsDebtEntry(address account, uint256 index)\\n        internal\\n        view\\n        returns (uint256 debtPercentage, uint256 debtEntryIndex)\\n    {\\n        require(\\n            index < FEE_PERIOD_LENGTH,\\n            \\\"index exceeds the FEE_PERIOD_LENGTH\\\"\\n        );\\n\\n        debtPercentage = accountIssuanceLedger[account][index].debtPercentage;\\n        debtEntryIndex = accountIssuanceLedger[account][index].debtEntryIndex;\\n    }\\n\\n    function _applicableIssuanceData(address account, uint256 closingDebtIndex)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        IssuanceData[FEE_PERIOD_LENGTH] memory issuanceData =\\n            accountIssuanceLedger[account];\\n\\n        // We want to use the user's debtEntryIndex at when the period closed\\n        // Find the oldest debtEntryIndex for the corresponding closingDebtIndex\\n        for (uint256 i = 0; i < FEE_PERIOD_LENGTH; i++) {\\n            if (closingDebtIndex >= issuanceData[i].debtEntryIndex) {\\n                return (\\n                    issuanceData[i].debtPercentage,\\n                    issuanceData[i].debtEntryIndex\\n                );\\n            }\\n        }\\n    }\\n\\n    function _feesAndRewardsFromPeriod(\\n        uint256 period,\\n        uint256 ownershipPercentage,\\n        uint256 debtEntryIndex\\n    ) internal view returns (uint256, uint256) {\\n        // If it's zero, they haven't issued, and they have no fees OR rewards.\\n        if (ownershipPercentage == 0) return (0, 0);\\n\\n        uint256 debtOwnershipForPeriod = ownershipPercentage;\\n\\n        // If period has closed we want to calculate debtPercentage for the period\\n        if (period > 0) {\\n            uint256 closingDebtIndex =\\n                uint256(_recentFeePeriodsStorage(period - 1).startingDebtIndex)\\n                    .sub(1);\\n            debtOwnershipForPeriod = _effectiveDebtRatioForPeriod(\\n                closingDebtIndex,\\n                ownershipPercentage,\\n                debtEntryIndex\\n            );\\n        }\\n\\n        // Calculate their percentage of the fees / rewards in this period\\n        // This is a high precision integer.\\n        uint256 feesFromPeriod =\\n            _recentFeePeriodsStorage(period).feesToDistribute.multiplyDecimal(\\n                debtOwnershipForPeriod\\n            );\\n\\n        uint256 rewardsFromPeriod =\\n            _recentFeePeriodsStorage(period)\\n                .rewardsToDistribute\\n                .multiplyDecimal(debtOwnershipForPeriod);\\n\\n        return (\\n            feesFromPeriod.preciseDecimalToDecimal(),\\n            rewardsFromPeriod.preciseDecimalToDecimal()\\n        );\\n    }\\n\\n    function _recentFeePeriodsStorage(uint256 index)\\n        internal\\n        view\\n        returns (FeePeriod storage)\\n    {\\n        return\\n            _recentFeePeriods[(_currentFeePeriod + index) % FEE_PERIOD_LENGTH];\\n    }\\n\\n    function _effectiveDebtRatioForPeriod(\\n        uint256 closingDebtIndex,\\n        uint256 ownershipPercentage,\\n        uint256 debtEntryIndex\\n    ) internal view returns (uint256) {\\n        // Figure out their global debt percentage delta at end of fee Period.\\n        // This is a high precision integer.\\n        uint256 feePeriodDebtOwnership =\\n            synthesizer()\\n                .debtLedger(closingDebtIndex)\\n                .divideDecimalRoundPrecise(synthesizer().debtLedger(debtEntryIndex))\\n                .multiplyDecimalRoundPrecise(ownershipPercentage);\\n\\n        return feePeriodDebtOwnership;\\n    }\\n\\n    function _recordFeePayment(uint256 xUSDAmount) internal returns (uint256) {\\n        // Don't assign to the parameter\\n        uint256 remainingToAllocate = xUSDAmount;\\n\\n        uint256 feesPaid;\\n        // Start at the oldest period and record the amount, moving to newer periods\\n        // until we've exhausted the amount.\\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\\n        for (uint256 i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\\n            uint256 feesAlreadyClaimed =\\n                _recentFeePeriodsStorage(i).feesClaimed;\\n            uint256 delta =\\n                _recentFeePeriodsStorage(i).feesToDistribute.sub(\\n                    feesAlreadyClaimed\\n                );\\n\\n            if (delta > 0) {\\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\\n                uint256 amountInPeriod =\\n                    delta < remainingToAllocate ? delta : remainingToAllocate;\\n\\n                _recentFeePeriodsStorage(i).feesClaimed = feesAlreadyClaimed\\n                    .add(amountInPeriod);\\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\\n                feesPaid = feesPaid.add(amountInPeriod);\\n\\n                // No need to continue iterating if we've recorded the whole amount;\\n                if (remainingToAllocate == 0) return feesPaid;\\n\\n                // We've exhausted feePeriods to distribute and no fees remain in last period\\n                // User last to claim would in this scenario have their remainder slashed\\n                if (i == 0 && remainingToAllocate > 0) {\\n                    remainingToAllocate = 0;\\n                }\\n            }\\n        }\\n\\n        return feesPaid;\\n    }\\n\\n    function _payFees(address account, uint256 xUSDAmount)\\n        internal\\n        notFeeAddress(account)\\n    {\\n        // Checks not really possible but rather gaurds for the internal code.\\n        require(\\n            account != address(0) ||\\n                account != address(this) ||\\n                account != address(synthesizer()),\\n            \\\"Can't send fees to this address\\\"\\n        );\\n\\n        // Grab the xUSD Synth\\n        Synth xUSDSynth = synthesizer().synths(xUSD);\\n\\n        // NOTE: we do not control the FEE_ADDRESS so it is not possible to do an\\n        // ERC20.approve() transaction to allow this feePool to call ERC20.transferFrom\\n        // to the accounts address\\n\\n        // Burn the source amount\\n        xUSDSynth.burn(FEE_ADDRESS, xUSDAmount);\\n\\n        // Mint their new synths\\n        xUSDSynth.issue(account, xUSDAmount);\\n    }\\n\\n    function _recordRewardPayment(uint256 dowsAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // Don't assign to the parameter\\n        uint256 remainingToAllocate = dowsAmount;\\n\\n        uint256 rewardPaid;\\n\\n        // Start at the oldest period and record the amount, moving to newer periods\\n        // until we've exhausted the amount.\\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\\n        for (uint256 i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\\n            uint256 toDistribute =\\n                _recentFeePeriodsStorage(i).rewardsToDistribute.sub(\\n                    _recentFeePeriodsStorage(i).rewardsClaimed\\n                );\\n\\n            if (toDistribute > 0) {\\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\\n                uint256 amountInPeriod =\\n                    toDistribute < remainingToAllocate\\n                        ? toDistribute\\n                        : remainingToAllocate;\\n\\n                _recentFeePeriodsStorage(i)\\n                    .rewardsClaimed = _recentFeePeriodsStorage(i)\\n                    .rewardsClaimed\\n                    .add(amountInPeriod);\\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\\n                rewardPaid = rewardPaid.add(amountInPeriod);\\n\\n                // No need to continue iterating if we've recorded the whole amount;\\n                if (remainingToAllocate == 0) return rewardPaid;\\n\\n                // We've exhausted feePeriods to distribute and no rewards remain in last period\\n                // User last to claim would in this scenario have their remainder slashed\\n                // due to rounding up of PreciseDecimal\\n                if (i == 0 && remainingToAllocate > 0) {\\n                    remainingToAllocate = 0;\\n                }\\n            }\\n        }\\n        return rewardPaid;\\n    }\\n\\n    function _payRewards(address account, uint256 dowsAmount)\\n        internal\\n        notFeeAddress(account)\\n    {\\n        require(account != address(0), \\\"Account can't be 0\\\");\\n        require(account != address(this), \\\"Can't send rewards to fee pool\\\");\\n        require(account != address(synthesizer()), \\\"Can't send rewards to shadows\\\");\\n\\n        // Record vesting entry for claiming address and amount\\n        // DOWS already minted to rewardEscrow balance\\n        rewardEscrow().appendVestingEntry(account, dowsAmount);\\n    }\\n\\n    /**\\n     * @dev onlyIssuer to call me on shadows.issue() & shadows.burn() calls to store the locked DOWS\\n     * per fee period so we know to allocate the correct proportions of fees and rewards per period\\n     */\\n    function appendAccountIssuanceRecord(\\n        address account,\\n        uint256 debtRatio,\\n        uint256 debtEntryIndex\\n    ) external onlySynthesizer {\\n        _appendAccountIssuanceRecord(\\n            account,\\n            debtRatio,\\n            debtEntryIndex,\\n            _recentFeePeriodsStorage(0).startingDebtIndex\\n        );\\n\\n        emit IssuanceDebtRatioEntry(\\n            account,\\n            debtRatio,\\n            debtEntryIndex,\\n            _recentFeePeriodsStorage(0).startingDebtIndex\\n        );\\n    }\\n\\n    function _appendAccountIssuanceRecord(\\n        address account,\\n        uint256 debtRatio,\\n        uint256 debtEntryIndex,\\n        uint256 currentPeriodStartDebtIndex\\n    ) private {\\n        // Is the current debtEntryIndex within this fee period\\n        if (\\n            accountIssuanceLedger[account][0].debtEntryIndex <\\n            currentPeriodStartDebtIndex\\n        ) {\\n            // If its older then shift the previous IssuanceData entries periods down to make room for the new one.\\n            issuanceDataIndexOrder(account);\\n        }\\n\\n        // Always store the latest IssuanceData entry at [0]\\n        accountIssuanceLedger[account][0].debtPercentage = debtRatio;\\n        accountIssuanceLedger[account][0].debtEntryIndex = debtEntryIndex;\\n    }\\n\\n    function issuanceDataIndexOrder(address account) private {\\n        for (uint256 i = FEE_PERIOD_LENGTH - 2; i < FEE_PERIOD_LENGTH; i--) {\\n            uint256 next = i + 1;\\n            accountIssuanceLedger[account][next]\\n                .debtPercentage = accountIssuanceLedger[account][i]\\n                .debtPercentage;\\n            accountIssuanceLedger[account][next]\\n                .debtEntryIndex = accountIssuanceLedger[account][i]\\n                .debtEntryIndex;\\n        }\\n    }\\n\\n    modifier onlyExchangerOrSynth {\\n        bool isExchanger = msg.sender == address(exchanger());\\n        bool isSynth = synthesizer().synthsByAddress(msg.sender) != bytes32(0);\\n\\n        require(isExchanger || isSynth, \\\"Only Exchanger, Synths Authorised\\\");\\n        _;\\n    }\\n\\n    function synthesizer() internal view returns (ISynthesizer) {\\n        return\\n            ISynthesizer(\\n                resolver.requireAndGetAddress(\\n                    \\\"Synthesizer\\\",\\n                    \\\"Missing Synthesizer address\\\"\\n                )\\n            );\\n    }\\n\\n    function exchanger() internal view returns (IExchanger) {\\n        return\\n            IExchanger(\\n                resolver.requireAndGetAddress(\\n                    \\\"Exchanger\\\",\\n                    \\\"Missing Exchanger address\\\"\\n                )\\n            );\\n    }\\n\\n    function rewardEscrow() internal view returns (IRewardEscrow) {\\n        return\\n            IRewardEscrow(\\n                resolver.requireAndGetAddress(\\n                    \\\"RewardEscrow\\\",\\n                    \\\"Missing RewardEscrow address\\\"\\n                )\\n            );\\n    }\\n\\n    modifier onlySynthesizer {\\n        require(\\n            msg.sender == address(synthesizer()),\\n            \\\"FeePool: Only Issuer Authorised\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExchanger {\\n        require(\\n            msg.sender == address(exchanger()),\\n            \\\"FeePool: Only Exchanger Authorised\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notFeeAddress(address account) {\\n        require(account != FEE_ADDRESS, \\\"Fee address not allowed\\\");\\n        _;\\n    }\\n\\n    event FeePeriodDurationUpdated(uint256 newFeePeriodDuration);\\n\\n    event IssuanceDebtRatioEntry(\\n        address account,\\n        uint256 debtRatio,\\n        uint256 debtEntryIndex,\\n        uint256 feePeriodStartingDebtIndex\\n    );\\n\\n    event FeePeriodClosed(uint256 feePeriodId);\\n\\n    event FeesClaimed(address account, uint256 xUSDAmount, uint256 dowsRewards);\\n}\\n\",\"keccak256\":\"0xd5d915454a0d8176c2eedf98e543a660d7ab93064a7c6a3672a408e7ea541262\",\"license\":\"MIT\"},\"contracts/Synth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./library/AddressResolverUpgradeable.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/ISynthesizer.sol\\\";\\nimport \\\"./interfaces/IExchanger.sol\\\";\\n\\ncontract Synth is Initializable, OwnableUpgradeable, ERC20Upgradeable, AddressResolverUpgradeable {\\n\\n    bytes32 public currencyKey;\\n\\n    bytes32 private constant xUSD = \\\"ShaUSD\\\";\\n    function initialize(\\n        string calldata _tokenName,\\n        string calldata _tokenSymbol,\\n        bytes32 _currencyKey,\\n        address _resolver\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __AddressResolver_init(_resolver);\\n        currencyKey = _currencyKey;\\n    }\\n\\n    function transferableSynths(address account) public view returns (uint) {\\n        return balanceOf(account);\\n    }\\n\\n    function issue(address account, uint amount) external onlyInternalContracts {\\n        _mint(account, amount);\\n        emit Issued(account, amount);\\n    }\\n\\n    function burn(address account, uint amount) external onlyInternalContracts {\\n        _burn(account, amount);\\n        emit Burned(account, amount);\\n    }\\n\\n    function purge(address[] calldata addresses) external onlyOwner {\\n        for (uint i = 0; i < addresses.length; i++) {\\n            address holder = addresses[i];\\n\\n            uint amountHeld = balanceOf(holder);\\n\\n            if (amountHeld > 0) {\\n                exchanger().exchange(holder, currencyKey, amountHeld, xUSD, holder);\\n                emit Purged(holder, amountHeld);\\n            }\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n        if (recipient == feePool().FEE_ADDRESS()) {\\n            return _transferToFeeAddress(recipient, amount);\\n        }\\n\\n        if (recipient == address(0)) {\\n            return _burn(_msgSender(), amount);\\n        }\\n        return super._transfer(sender,recipient,amount);\\n    }\\n\\n    /**\\n     * non-xUSD synths are exchanged into xUSD via synthInitiatedExchange\\n     * notify feePool to record amount as fee paid to feePool \\n    */\\n    function _transferToFeeAddress(address recipient, uint amount) internal{\\n        uint amountInUSD;\\n\\n        if (currencyKey == xUSD) {\\n            amountInUSD = amount;\\n            super._transfer(_msgSender(), recipient, amount);\\n        } else {\\n            amountInUSD = exchanger().exchange(_msgSender(), currencyKey, amount, xUSD, feePool().FEE_ADDRESS());\\n        }\\n\\n        feePool().recordFeePaid(amountInUSD);\\n\\n        return;\\n    }\\n\\n    function synthesizer() internal view returns (ISynthesizer) {\\n        return ISynthesizer(resolver.requireAndGetAddress(\\\"Synthesizer\\\", \\\"Missing Synthesizer address\\\"));\\n    }\\n\\n    function feePool() internal view returns (IFeePool) {\\n        return IFeePool(resolver.requireAndGetAddress(\\\"FeePool\\\", \\\"Missing FeePool address\\\"));\\n    }\\n\\n    function exchanger() internal view returns (IExchanger) {\\n        return IExchanger(resolver.requireAndGetAddress(\\\"Exchanger\\\", \\\"Missing Exchanger address\\\"));\\n    }\\n\\n    modifier onlyInternalContracts() {\\n        bool isSynthesizer = msg.sender == address(synthesizer());\\n        bool isFeePool = msg.sender == address(feePool());\\n        bool isExchanger = msg.sender == address(exchanger());\\n\\n        require(\\n            isSynthesizer || isFeePool || isExchanger,\\n            \\\"Only Synthesizer, FeePool, Exchanger or Issuer contracts allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    event Issued(address indexed account, uint value);\\n\\n    event Burned(address indexed account, uint value);\\n\\n    event Purged(address indexed account, uint value);\\n}\\n\",\"keccak256\":\"0xf168ac9c2acb3ceb382e8a7a36aa51e247c243034096ea32bbd01ff15c690d00\",\"license\":\"MIT\"},\"contracts/interfaces/IExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\ninterface IExchanger {\\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\\n\\n    function settlementOwing(address account, bytes32 currencyKey)\\n        external\\n        view\\n        returns (uint reclaimAmount, uint rebateAmount);\\n\\n    function settle(address from, bytes32 currencyKey) external returns (uint reclaimed, uint refunded);\\n\\n    function exchange(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress\\n    ) external returns (uint amountReceived);\\n\\n    function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint amount, uint refunded)\\n        external\\n        view\\n        returns (uint amountAfterSettlement);\\n}\\n\",\"keccak256\":\"0xe7cbd68b24c9d7b023b5940ed3ffda9eb3cb60f239e49c6454785341f80e00d2\",\"license\":\"MI\"},\"contracts/interfaces/IFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @title FeePool Interface\\n */\\nabstract contract IFeePool {\\n\\n    address public FEE_ADDRESS;\\n    uint public exchangeFeeRate;\\n\\n    function amountReceivedFromExchange(uint value) virtual external view returns (uint);\\n\\n    function amountReceivedFromTransfer(uint value) virtual external view returns (uint);\\n\\n    function recordFeePaid(uint xUSDAmount) virtual external;\\n\\n    function recordRewardPaid(uint xUSDAmount) virtual external;\\n\\n    function appendAccountIssuanceRecord(address account, uint lockedAmount, uint debtEntryIndex) virtual external;\\n\\n    function setRewardsToDistribute(uint amount) virtual external;\\n}\\n\",\"keccak256\":\"0x1c880160c6a9f5eac13a853c127ca3f0f61d28d54a0e46c41b5f40ccfc79db49\",\"license\":\"MI\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title RewardEscrow interface\\n */\\ninterface IRewardEscrow {\\n    function balanceOf(address account) external view returns (uint);\\n    function vestBalanceOf(address account) external view returns (uint);\\n    function appendVestingEntry(address account, uint quantity) external;\\n}\\n\",\"keccak256\":\"0x9171121088965e480cb7ed08c4a973014495b18e8bd124e84d1ef4227ad1c688\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthesizer.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../Synth.sol\\\";\\n\\nabstract contract ISynthesizer {\\n    uint256 public totalSupply;\\n\\n    uint256 public issuanceRatio;\\n\\n    mapping(bytes32 => Synth) public synths;\\n\\n    mapping(address => bytes32) public synthsByAddress;\\n\\n    uint256[] public debtLedger;\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual returns (bool);\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external virtual returns (uint256 amountReceived);\\n\\n    function issueSynths(uint256 amount) external virtual;\\n\\n    function issueMaxSynths() external virtual;\\n\\n    function burnSynths(uint256 amount) external virtual;\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        virtual\\n        returns (uint256 reclaimed, uint256 refunded);\\n\\n    function collateralisationRatio(address issuer)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function totalIssuedSynths(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        virtual\\n        returns (uint256, uint256);\\n\\n    function isWaitingPeriod(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function debtLedgerLength() external view virtual returns (uint256);\\n\\n    function transferableShadows(address account)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function liquidateDelinquentAccount(\\n        address account,\\n        uint256 susdAmount,\\n        address liquidator\\n    )\\n        external\\n        virtual\\n        returns (uint256 totalRedeemed, uint256 amountToLiquidate);\\n}\\n\",\"keccak256\":\"0x1d641ec7084e8fe1d76c4aa59fc15c3c7ff9ccfe1130eeab61983a8284bc8e9c\",\"license\":\"MI\"},\"contracts/library/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) public onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n        for (uint i = 0; i < names.length; i++) {\\n            require(Address.isContract(destinations[i]), \\\"Must be contract address\\\");\\n            repository[names[i]] = destinations[i];\\n        }\\n    }\\n\\n    function getAddress(bytes32 name) public view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) public view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xc807a2e702f29215ea3ab06b849af2c24cc383c89812450108ef70a695259d8e\",\"license\":\"MIT\"},\"contracts/library/AddressResolverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./AddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract AddressResolverUpgradeable is Initializable, OwnableUpgradeable {\\n    AddressResolver public resolver;\\n\\n    function __AddressResolver_init(address _resolver) internal initializer {\\n        __Ownable_init();\\n        __AddressResolver_init_unchained(_resolver);\\n    }\\n\\n    function __AddressResolver_init_unchained(address _resolver)\\n        internal\\n        initializer\\n    {\\n        resolver = AddressResolver(_resolver);\\n    }\\n\\n    function setResolver(AddressResolver _resolver) public onlyOwner {\\n        resolver = _resolver;\\n        emit ResolverUpdated(_resolver);\\n    }\\n\\n    event ResolverUpdated(AddressResolver _resolver);\\n}\\n\",\"keccak256\":\"0x6f22f48a973a70e16f73edffd2a7f70cd93b8c6f5e79a0b93e7d2b73569079a6\",\"license\":\"MIT\"},\"contracts/library/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Safely manipulate unsigned fixed-point decimals at a given precision level.\\n * @dev Functions accepting uints in this contract and derived contracts\\n * are taken to be such fixed point decimals of a specified precision (either standard\\n * or high).\\n */\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /** \\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /** \\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     * \\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     * \\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\\n\",\"keccak256\":\"0x2ab536c6443a49d84c540b3f7c552cfcd64e00e8c932e4930a53c6805381bb67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612eee806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063c1a18509116100a2578063da35a26f11610071578063da35a26f14610527578063e0e6393d14610553578063eb1edd611461055b578063f2fde38b14610563576101cf565b8063c1a18509146104dc578063cb1f33e5146104e4578063cff2ddad14610501578063d294f0931461051f576101cf565b80637edd4e31116100de5780637edd4e3114610492578063866452741461049a5780638da5cb5b146104cc578063ae2e933b146104d4576101cf565b8063715018a6146104415780637ad57a41146104495780637de6554514610466576101cf565b80632cce0e54116101715780633fcd22401161014b5780633fcd2240146103605780634e543b26146103c4578063578a791d146103ea57806359a2f19f14610407576101cf565b80632cce0e54146102bb57806333140016146102d85780633ebc457a14610358576101cf565b80630de58615116101ad5780630de586151461024f5780630f9b49551461028e57806322425fa41461029657806322bf55ef1461029e576101cf565b806304c49f2c146101d457806304f3bcec146101f357806307ea50cd14610217575b600080fd5b6101f1600480360360208110156101ea57600080fd5b5035610589565b005b6101fb610626565b604080516001600160a01b039092168252519081900360200190f35b61023d6004803603602081101561022d57600080fd5b50356001600160a01b0316610635565b60408051918252519081900360200190f35b6102756004803603602081101561026557600080fd5b50356001600160a01b0316610654565b6040805192835260208301919091528051918290030190f35b61023d6106cf565b61023d6106d5565b6101f1600480360360208110156102b457600080fd5b50356106db565b6101f1600480360360208110156102d157600080fd5b50356107e8565b6102fe600480360360208110156102ee57600080fd5b50356001600160a01b0316610920565b6040516000826003835b818410156103485760208402830151604080838360005b8381101561033757818101518382015260200161031f565b505050509050019260010192610308565b9250505091505060405180910390f35b6101f1610a44565b61037d6004803603602081101561037657600080fd5b5035610d0c565b604080516001600160401b039889168152968816602088015294909616858501526060850192909252608084015260a083015260c082019290925290519081900360e00190f35b6101f1600480360360208110156103da57600080fd5b50356001600160a01b0316610daf565b6101f16004803603602081101561040057600080fd5b5035610e65565b61042d6004803603602081101561041d57600080fd5b50356001600160a01b0316610f99565b604080519115158252519081900360200190f35b6101f161114a565b6101f16004803603602081101561045f57600080fd5b50356111f6565b6102756004803603604081101561047c57600080fd5b506001600160a01b03813516906020013561125d565b6101f161128a565b6101f1600480360360608110156104b057600080fd5b506001600160a01b03813516906020810135906040013561133e565b6101fb611445565b6101fb611454565b61023d611463565b6101f1600480360360208110156104fa57600080fd5b5035611469565b61050961158a565b6040805160ff9092168252519081900360200190f35b61042d61158f565b6101f16004803603604081101561053d57600080fd5b50803590602001356001600160a01b03166115a6565b61023d611739565b6101fb61173f565b6101f16004803603602081101561057957600080fd5b50356001600160a01b0316611757565b61059161185a565b6001600160a01b03166105a2611445565b6001600160a01b0316146105eb576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b607b8190556040805182815290517f791bd58dd9719b5eb5ccdd6ec4d5c459b0ab8efcf59b723cf477693c0889eacd9181900360200190a150565b6065546001600160a01b031681565b6001600160a01b0381166000908152606860205260409020545b919050565b60008061065f612cb5565b61066884610920565b905060008060015b60038110156106c35761069584826003811061068857fe5b602002015151849061185e565b92506106b98482600381106106a657fe5b602002015160016020020151839061185e565b9150600101610670565b50909350915050915091565b606a5481565b607b5481565b60006106e56118c1565b6001600160a01b0316331490506000806106fd61197d565b6001600160a01b03166316b2213f336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b50511415905081806107825750805b6107bd5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e986021913960400191505060405180910390fd5b6107d5836107cb6000611a0a565b600101549061185e565b6107df6000611a0a565b60010155505050565b6107f061185a565b6001600160a01b0316610801611445565b6001600160a01b03161461084a576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6032811115610895576040805162461bcd60e51b81526020600482015260126024820152710a8d0e4cae6d0ded8c840e8dede40d0d2ced60731b604482015290519081900360640190fd5b61091a606461091473D4467753Eb04D2fE0C8BFF17c54Ba5332ee94E6963907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e157600080fd5b505af41580156108f5573d6000803e3d6000fd5b505050506040513d602081101561090b57600080fd5b50518490611a34565b90611a8d565b607c5550565b610928612cb5565b600080610936846000611af4565b909250905080158015610947575081155b1561095357505061064f565b60008061096260008585611b95565b865182905286516020018190529092509050600061097f87610635565b905060025b8015610a39576000198101600061099a82611a0a565b54600160401b90046001600160401b0316905080158015906109cd57506109c083611a0a565b546001600160401b031684105b15610a2e5760006109df826001611c42565b90506109eb8b82611c9f565b90995097506109fb848a8a611b95565b9097509550868a8560038110610a0d57fe5b602002015152858a8560038110610a2057fe5b602002015160016020020152505b505060001901610984565b505050505050919050565b607b544203610a536000611a0a565b54600160801b90046001600160401b03161115610ab7576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206561726c7920746f20636c6f73652066656520706572696f64000000604482015290519081900360640190fd5b6000610ac36001611a0a565b90506000610ad16002611a0a565b9050610afc8260010154610af683600201548460010154611c4290919063ffffffff16565b9061185e565b610b066001611a0a565b60010155600380830154600483015491830154610b2792610af69190611c42565b610b316001611a0a565b600390810191909155607a54610b5f9190610b5990600190610b53908461185e565b90611c42565b90611d80565b607a819055606b9060038110610b7157fe5b6005020180546001600160c01b0319168155600060018083018290556002830182905560038301829055600490920155610bbe90610bae81611a0a565b546001600160401b03169061185e565b610bc86000611a0a565b805467ffffffffffffffff19166001600160401b0392909216919091179055610bef61197d565b6001600160a01b031663cd92eba96040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d6020811015610c5157600080fd5b5051610c5d6000611a0a565b80546001600160401b0392909216600160401b026fffffffffffffffff00000000000000001990921691909117905542610c976000611a0a565b80546001600160401b0392909216600160801b0267ffffffffffffffff60801b199092169190911790557fe2ca356e01eb0a4bb7caaf07d472b7d687db156713ffc3111c758e9fe0a17ea7610cec6001611a0a565b54604080516001600160401b039092168252519081900360200190a15050565b6000806000806000806000610d1f612ce2565b610d2889611a0a565b6040805160e08101825282546001600160401b03808216808452600160401b8304821660208501819052600160801b909304909116938301849052600185015460608401819052600286015460808501819052600387015460a0860181905260049097015460c0909501859052919f929e50939c50929a5091985091965090945092505050565b610db761185a565b6001600160a01b0316610dc8611445565b6001600160a01b031614610e11576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b606580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f15cd6d20bba01b3fcb790c73829dd07412cbdf689ef818c96a2505889f3736a29181900360200190a150565b610e6d61185a565b6001600160a01b0316610e7e611445565b6001600160a01b031614610ec7576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b600a73D4467753Eb04D2fE0C8BFF17c54Ba5332ee94E6963907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505af4158015610f21573d6000803e3d6000fd5b505050506040513d6020811015610f3757600080fd5b505181610f4057fe5b048110610f94576040805162461bcd60e51b815260206004820152601c60248201527f72617465203c204d41585f45584348414e47455f4645455f5241544500000000604482015290519081900360640190fd5b606a55565b600080610fa461197d565b6001600160a01b031663a311c7c2846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d602081101561101a57600080fd5b50519050600061102861197d565b6001600160a01b031663b410a0346040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d602081101561108a57600080fd5b50519050808210156110a15760019250505061064f565b6000611129611122607c5473D4467753Eb04D2fE0C8BFF17c54Ba5332ee94E6963907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f057600080fd5b505af4158015611104573d6000803e3d6000fd5b505050506040513d602081101561111a57600080fd5b50519061185e565b8390611de7565b90508083111561113f576000935050505061064f565b506001949350505050565b61115261185a565b6001600160a01b0316611163611445565b6001600160a01b0316146111ac576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6111fe61185a565b6001600160a01b031661120f611445565b6001600160a01b031614611258576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b606755565b6069602052816000526040600020816003811061127657fe5b600202018054600190910154909250905082565b61129261185a565b6001600160a01b03166112a3611445565b6001600160a01b0316146112ec576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b60005b600381101561133b57606b816003811061130557fe5b6005020180546001600160c01b0319168155600060018083018290556002830182905560038301829055600490920155016112ef565b50565b61134661197d565b6001600160a01b0316336001600160a01b0316146113ab576040805162461bcd60e51b815260206004820152601f60248201527f466565506f6f6c3a204f6e6c792049737375657220417574686f726973656400604482015290519081900360640190fd5b6113d18383836113bb6000611a0a565b54600160401b90046001600160401b0316611e03565b7f28dcdf40e6b6196065d54760038ab1a8c0c1d9cfa58a99e6b0cb6022f7e247758383836113ff6000611a0a565b54604080516001600160a01b0390951685526020850193909352838301919091526001600160401b03600160401b909104166060830152519081900360800190a1505050565b6033546001600160a01b031690565b6066546001600160a01b031681565b60675481565b60006114736118c1565b6001600160a01b03163314905060008061148b61197d565b6001600160a01b03166316b2213f336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156114d757600080fd5b505afa1580156114eb573d6000803e3d6000fd5b505050506040513d602081101561150157600080fd5b50511415905081806115105750805b61154b5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e986021913960400191505060405180910390fd5b61157761156360675485611a3490919063ffffffff16565b61156d6000611a0a565b600301549061185e565b6115816000611a0a565b60030155505050565b600381565b60006115a161159c61185a565b611e53565b905090565b600054610100900460ff16806115bf57506115bf611fb2565b806115cd575060005460ff16155b6116085760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015611633576000805460ff1961ff0019909116610100171660011790555b600a73D4467753Eb04D2fE0C8BFF17c54Ba5332ee94E6963907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561167957600080fd5b505af415801561168d573d6000803e3d6000fd5b505050506040513d60208110156116a357600080fd5b5051816116ac57fe5b048310611700576040805162461bcd60e51b815260206004820152601c60248201527f72617465203c204d41585f45584348414e47455f4645455f5241544500000000604482015290519081900360640190fd5b611708611fc3565b61171182612074565b62093a80607b55606a83905560016067558015611734576000805461ff00191690555b505050565b607c5481565b7343707c6bb6202a5e1007356539a925c052ea976781565b61175f61185a565b6001600160a01b0316611770611445565b6001600160a01b0316146117b9576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6001600160a01b0381166117fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180612da06026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156118b8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6065546040805163dacb2d0160e01b81526822bc31b430b733b2b960b91b600482015260248101829052601960448201527f4d697373696e672045786368616e676572206164647265737300000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d602081101561197657600080fd5b5051905090565b6065546040805163dacb2d0160e01b81526a29bcb73a3432b9b4bd32b960a91b600482015260248101829052601b60448201527f4d697373696e672053796e74686573697a657220616464726573730000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b6000606b600360ff1683607a540181611a1f57fe5b0660038110611a2a57fe5b6005020192915050565b600082611a43575060006118bb565b82820282848281611a5057fe5b04146118b85760405162461bcd60e51b8152600401808060200182810382526021815260200180612e576021913960400191505060405180910390fd5b6000808211611ae3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611aec57fe5b049392505050565b60008060038310611b365760405162461bcd60e51b8152600401808060200182810382526023815260200180612dc66023913960400191505060405180910390fd5b6001600160a01b03841660009081526069602052604090208360038110611b5957fe5b60020201546001600160a01b03851660009081526069602052604090209092508360038110611b8457fe5b600202016001015490509250929050565b60008083611ba857506000905080611c3a565b838515611bea576000611bd96001611bc260018a03611a0a565b54600160401b90046001600160401b031690611c42565b9050611be6818787612128565b9150505b6000611c0382611bf989611a0a565b6001015490611de7565b90506000611c1e83611c148a611a0a565b6003015490611de7565b9050611c2982612235565b611c3282612235565b945094505050505b935093915050565b600082821115611c99576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080611caa612d3a565b6001600160a01b0385166000908152606960205260408082208151606081019092529091600390835b82821015611d0f578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611cd3565b50505050905060005b6003811015611d7657818160038110611d2d57fe5b6020020151602001518510611d6e57818160038110611d4857fe5b602002015151828260038110611d5a57fe5b602002015160200151935093505050611d79565b600101611d18565b50505b9250929050565b6000808211611dd6576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381611ddf57fe5b069392505050565b6000670de0b6b3a7640000611dfc8484611a34565b81611aec57fe5b6001600160a01b038416600090815260696020526040902060010154811115611e2f57611e2f84612257565b506001600160a01b0392909216600090815260696020526040902090815560010155565b600080808080611e6286610f99565b611eb3576040805162461bcd60e51b815260206004820152601f60248201527f432d526174696f2062656c6f772070656e616c7479207468726573686f6c6400604482015290519081900360640190fd5b611ebc86610654565b909250905081151580611ecf5750600081115b611f0a5760405162461bcd60e51b8152600401808060200182810382526040815260200180612de96040913960400191505060405180910390fd5b611f2786611f186001611a0a565b546001600160401b0316612325565b8115611f4257611f3682612341565b9250611f428684612405565b8015611f5d57611f518161267c565b9350611f5d868561273e565b604080516001600160a01b03881681526020810185905280820186905290517f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c79181900360600190a150600195945050505050565b6000611fbd30612942565b15905090565b600054610100900460ff1680611fdc5750611fdc611fb2565b80611fea575060005460ff16155b6120255760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612050576000805460ff1961ff0019909116610100171660011790555b612058612948565b6120606129e8565b801561133b576000805461ff001916905550565b600054610100900460ff168061208d575061208d611fb2565b8061209b575060005460ff16155b6120d65760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612101576000805460ff1961ff0019909116610100171660011790555b612109611fc3565b61211282612ae1565b8015612124576000805461ff00191690555b5050565b60008061222c8461222661213a61197d565b6001600160a01b03166308d95cd5876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b50516121b161197d565b6001600160a01b03166308d95cd58a6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b505190612b9e565b90612bb7565b95945050505050565b60006305f5e10082046005600a82061061224d57600a015b600a900492915050565b60015b6003811015612124576001600160a01b03821660009081526069602052604090206001820190826003811061228b57fe5b60020201546001600160a01b038416600090815260696020526040902082600381106122b357fe5b60020201556001600160a01b038316600090815260696020526040902082600381106122db57fe5b600202016001015460696000856001600160a01b03166001600160a01b03168152602001908152602001600020826003811061231357fe5b6002020160010155506000190161225a565b6001600160a01b03909116600090815260686020526040902055565b6000818160025b60038110156123fd57600061235c82611a0a565b600201549050600061237b8261237185611a0a565b6001015490611c42565b905080156123f25760008582106123925785612394565b815b90506123a0838261185e565b6123a985611a0a565b600201556123b78682611c42565b95506123c3858261185e565b9450856123d85784965050505050505061064f565b831580156123e65750600086115b156123f057600095505b505b505060001901612348565b509392505050565b816001600160a01b0381167343707c6bb6202a5e1007356539a925c052ea97671415612472576040805162461bcd60e51b8152602060048201526017602482015276119959481859191c995cdcc81b9bdd08185b1b1bddd959604a1b604482015290519081900360640190fd5b6001600160a01b03831615158061249257506001600160a01b0383163014155b806124b657506124a061197d565b6001600160a01b0316836001600160a01b031614155b612507576040805162461bcd60e51b815260206004820152601f60248201527f43616e27742073656e64206665657320746f2074686973206164647265737300604482015290519081900360640190fd5b600061251161197d565b6001600160a01b031663326080396514da185554d160d21b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561255d57600080fd5b505afa158015612571573d6000803e3d6000fd5b505050506040513d602081101561258757600080fd5b505160408051632770a7eb60e21b81527343707c6bb6202a5e1007356539a925c052ea976760048201526024810186905290519192506001600160a01b03831691639dc29fac9160448082019260009290919082900301818387803b1580156125ef57600080fd5b505af1158015612603573d6000803e3d6000fd5b50505050806001600160a01b031663867904b485856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561265e57600080fd5b505af1158015612672573d6000803e3d6000fd5b5050505050505050565b6000818160025b60038110156123fd5760006126b161269a83611a0a565b600401546126a784611a0a565b6003015490611c42565b905080156127345760008482106126c857846126ca565b815b90506126e3816126d985611a0a565b600401549061185e565b6126ec84611a0a565b600401556126fa8582611c42565b9450612706848261185e565b93508461271a57839550505050505061064f565b821580156127285750600085115b1561273257600094505b505b5060001901612683565b816001600160a01b0381167343707c6bb6202a5e1007356539a925c052ea976714156127ab576040805162461bcd60e51b8152602060048201526017602482015276119959481859191c995cdcc81b9bdd08185b1b1bddd959604a1b604482015290519081900360640190fd5b6001600160a01b0383166127fb576040805162461bcd60e51b815260206004820152601260248201527104163636f756e742063616e277420626520360741b604482015290519081900360640190fd5b6001600160a01b038316301415612859576040805162461bcd60e51b815260206004820152601e60248201527f43616e27742073656e64207265776172647320746f2066656520706f6f6c0000604482015290519081900360640190fd5b61286161197d565b6001600160a01b0316836001600160a01b031614156128c7576040805162461bcd60e51b815260206004820152601d60248201527f43616e27742073656e64207265776172647320746f20736861646f7773000000604482015290519081900360640190fd5b6128cf612bd0565b6001600160a01b031663b5ddb9c784846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561292557600080fd5b505af1158015612939573d6000803e3d6000fd5b50505050505050565b3b151590565b600054610100900460ff16806129615750612961611fb2565b8061296f575060005460ff16155b6129aa5760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612060576000805460ff1961ff001990911661010017166001179055801561133b576000805461ff001916905550565b600054610100900460ff1680612a015750612a01611fb2565b80612a0f575060005460ff16155b612a4a5760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612a75576000805460ff1961ff0019909116610100171660011790555b6000612a7f61185a565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561133b576000805461ff001916905550565b600054610100900460ff1680612afa5750612afa611fb2565b80612b08575060005460ff16155b612b435760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612b6e576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015612124576000805461ff00191690555050565b60006118b883836b033b2e3c9fd0803ce8000000612c5e565b60006118b883836b033b2e3c9fd0803ce8000000612c90565b6065546040805163dacb2d0160e01b81526b526577617264457363726f7760a01b600482015260248101829052601c60448201527f4d697373696e6720526577617264457363726f77206164647265737300000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b600080612c728461091487600a8702611a34565b90506005600a825b0610612c8457600a015b600a9004949350505050565b600080600a8304612ca18686611a34565b81612ca857fe5b0490506005600a82612c7a565b60405180606001604052806003905b612ccc612d67565b815260200190600190039081612cc45790505090565b6040518060e0016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b03168152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806003905b612d51612d85565b815260200190600190039081612d495790505090565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373696e646578206578636565647320746865204645455f504552494f445f4c454e4754484e6f2066656573206f72207265776172647320617661696c61626c6520666f7220706572696f642c206f72206665657320616c726561647920636c61696d6564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f6e6c792045786368616e6765722c2053796e74687320417574686f7269736564a2646970667358221220ecd6e2e01fd697dcf3ee1521b689f1ed1a35f078b2a5d508c6f13f3f4245e08f64736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063c1a18509116100a2578063da35a26f11610071578063da35a26f14610527578063e0e6393d14610553578063eb1edd611461055b578063f2fde38b14610563576101cf565b8063c1a18509146104dc578063cb1f33e5146104e4578063cff2ddad14610501578063d294f0931461051f576101cf565b80637edd4e31116100de5780637edd4e3114610492578063866452741461049a5780638da5cb5b146104cc578063ae2e933b146104d4576101cf565b8063715018a6146104415780637ad57a41146104495780637de6554514610466576101cf565b80632cce0e54116101715780633fcd22401161014b5780633fcd2240146103605780634e543b26146103c4578063578a791d146103ea57806359a2f19f14610407576101cf565b80632cce0e54146102bb57806333140016146102d85780633ebc457a14610358576101cf565b80630de58615116101ad5780630de586151461024f5780630f9b49551461028e57806322425fa41461029657806322bf55ef1461029e576101cf565b806304c49f2c146101d457806304f3bcec146101f357806307ea50cd14610217575b600080fd5b6101f1600480360360208110156101ea57600080fd5b5035610589565b005b6101fb610626565b604080516001600160a01b039092168252519081900360200190f35b61023d6004803603602081101561022d57600080fd5b50356001600160a01b0316610635565b60408051918252519081900360200190f35b6102756004803603602081101561026557600080fd5b50356001600160a01b0316610654565b6040805192835260208301919091528051918290030190f35b61023d6106cf565b61023d6106d5565b6101f1600480360360208110156102b457600080fd5b50356106db565b6101f1600480360360208110156102d157600080fd5b50356107e8565b6102fe600480360360208110156102ee57600080fd5b50356001600160a01b0316610920565b6040516000826003835b818410156103485760208402830151604080838360005b8381101561033757818101518382015260200161031f565b505050509050019260010192610308565b9250505091505060405180910390f35b6101f1610a44565b61037d6004803603602081101561037657600080fd5b5035610d0c565b604080516001600160401b039889168152968816602088015294909616858501526060850192909252608084015260a083015260c082019290925290519081900360e00190f35b6101f1600480360360208110156103da57600080fd5b50356001600160a01b0316610daf565b6101f16004803603602081101561040057600080fd5b5035610e65565b61042d6004803603602081101561041d57600080fd5b50356001600160a01b0316610f99565b604080519115158252519081900360200190f35b6101f161114a565b6101f16004803603602081101561045f57600080fd5b50356111f6565b6102756004803603604081101561047c57600080fd5b506001600160a01b03813516906020013561125d565b6101f161128a565b6101f1600480360360608110156104b057600080fd5b506001600160a01b03813516906020810135906040013561133e565b6101fb611445565b6101fb611454565b61023d611463565b6101f1600480360360208110156104fa57600080fd5b5035611469565b61050961158a565b6040805160ff9092168252519081900360200190f35b61042d61158f565b6101f16004803603604081101561053d57600080fd5b50803590602001356001600160a01b03166115a6565b61023d611739565b6101fb61173f565b6101f16004803603602081101561057957600080fd5b50356001600160a01b0316611757565b61059161185a565b6001600160a01b03166105a2611445565b6001600160a01b0316146105eb576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b607b8190556040805182815290517f791bd58dd9719b5eb5ccdd6ec4d5c459b0ab8efcf59b723cf477693c0889eacd9181900360200190a150565b6065546001600160a01b031681565b6001600160a01b0381166000908152606860205260409020545b919050565b60008061065f612cb5565b61066884610920565b905060008060015b60038110156106c35761069584826003811061068857fe5b602002015151849061185e565b92506106b98482600381106106a657fe5b602002015160016020020151839061185e565b9150600101610670565b50909350915050915091565b606a5481565b607b5481565b60006106e56118c1565b6001600160a01b0316331490506000806106fd61197d565b6001600160a01b03166316b2213f336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b50511415905081806107825750805b6107bd5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e986021913960400191505060405180910390fd5b6107d5836107cb6000611a0a565b600101549061185e565b6107df6000611a0a565b60010155505050565b6107f061185a565b6001600160a01b0316610801611445565b6001600160a01b03161461084a576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6032811115610895576040805162461bcd60e51b81526020600482015260126024820152710a8d0e4cae6d0ded8c840e8dede40d0d2ced60731b604482015290519081900360640190fd5b61091a606461091473__$22e4fd0786f9bb9222b95fc3343146c524$__63907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e157600080fd5b505af41580156108f5573d6000803e3d6000fd5b505050506040513d602081101561090b57600080fd5b50518490611a34565b90611a8d565b607c5550565b610928612cb5565b600080610936846000611af4565b909250905080158015610947575081155b1561095357505061064f565b60008061096260008585611b95565b865182905286516020018190529092509050600061097f87610635565b905060025b8015610a39576000198101600061099a82611a0a565b54600160401b90046001600160401b0316905080158015906109cd57506109c083611a0a565b546001600160401b031684105b15610a2e5760006109df826001611c42565b90506109eb8b82611c9f565b90995097506109fb848a8a611b95565b9097509550868a8560038110610a0d57fe5b602002015152858a8560038110610a2057fe5b602002015160016020020152505b505060001901610984565b505050505050919050565b607b544203610a536000611a0a565b54600160801b90046001600160401b03161115610ab7576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206561726c7920746f20636c6f73652066656520706572696f64000000604482015290519081900360640190fd5b6000610ac36001611a0a565b90506000610ad16002611a0a565b9050610afc8260010154610af683600201548460010154611c4290919063ffffffff16565b9061185e565b610b066001611a0a565b60010155600380830154600483015491830154610b2792610af69190611c42565b610b316001611a0a565b600390810191909155607a54610b5f9190610b5990600190610b53908461185e565b90611c42565b90611d80565b607a819055606b9060038110610b7157fe5b6005020180546001600160c01b0319168155600060018083018290556002830182905560038301829055600490920155610bbe90610bae81611a0a565b546001600160401b03169061185e565b610bc86000611a0a565b805467ffffffffffffffff19166001600160401b0392909216919091179055610bef61197d565b6001600160a01b031663cd92eba96040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d6020811015610c5157600080fd5b5051610c5d6000611a0a565b80546001600160401b0392909216600160401b026fffffffffffffffff00000000000000001990921691909117905542610c976000611a0a565b80546001600160401b0392909216600160801b0267ffffffffffffffff60801b199092169190911790557fe2ca356e01eb0a4bb7caaf07d472b7d687db156713ffc3111c758e9fe0a17ea7610cec6001611a0a565b54604080516001600160401b039092168252519081900360200190a15050565b6000806000806000806000610d1f612ce2565b610d2889611a0a565b6040805160e08101825282546001600160401b03808216808452600160401b8304821660208501819052600160801b909304909116938301849052600185015460608401819052600286015460808501819052600387015460a0860181905260049097015460c0909501859052919f929e50939c50929a5091985091965090945092505050565b610db761185a565b6001600160a01b0316610dc8611445565b6001600160a01b031614610e11576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b606580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f15cd6d20bba01b3fcb790c73829dd07412cbdf689ef818c96a2505889f3736a29181900360200190a150565b610e6d61185a565b6001600160a01b0316610e7e611445565b6001600160a01b031614610ec7576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b600a73__$22e4fd0786f9bb9222b95fc3343146c524$__63907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0d57600080fd5b505af4158015610f21573d6000803e3d6000fd5b505050506040513d6020811015610f3757600080fd5b505181610f4057fe5b048110610f94576040805162461bcd60e51b815260206004820152601c60248201527f72617465203c204d41585f45584348414e47455f4645455f5241544500000000604482015290519081900360640190fd5b606a55565b600080610fa461197d565b6001600160a01b031663a311c7c2846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d602081101561101a57600080fd5b50519050600061102861197d565b6001600160a01b031663b410a0346040518163ffffffff1660e01b815260040160206040518083038186803b15801561106057600080fd5b505afa158015611074573d6000803e3d6000fd5b505050506040513d602081101561108a57600080fd5b50519050808210156110a15760019250505061064f565b6000611129611122607c5473__$22e4fd0786f9bb9222b95fc3343146c524$__63907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f057600080fd5b505af4158015611104573d6000803e3d6000fd5b505050506040513d602081101561111a57600080fd5b50519061185e565b8390611de7565b90508083111561113f576000935050505061064f565b506001949350505050565b61115261185a565b6001600160a01b0316611163611445565b6001600160a01b0316146111ac576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6111fe61185a565b6001600160a01b031661120f611445565b6001600160a01b031614611258576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b606755565b6069602052816000526040600020816003811061127657fe5b600202018054600190910154909250905082565b61129261185a565b6001600160a01b03166112a3611445565b6001600160a01b0316146112ec576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b60005b600381101561133b57606b816003811061130557fe5b6005020180546001600160c01b0319168155600060018083018290556002830182905560038301829055600490920155016112ef565b50565b61134661197d565b6001600160a01b0316336001600160a01b0316146113ab576040805162461bcd60e51b815260206004820152601f60248201527f466565506f6f6c3a204f6e6c792049737375657220417574686f726973656400604482015290519081900360640190fd5b6113d18383836113bb6000611a0a565b54600160401b90046001600160401b0316611e03565b7f28dcdf40e6b6196065d54760038ab1a8c0c1d9cfa58a99e6b0cb6022f7e247758383836113ff6000611a0a565b54604080516001600160a01b0390951685526020850193909352838301919091526001600160401b03600160401b909104166060830152519081900360800190a1505050565b6033546001600160a01b031690565b6066546001600160a01b031681565b60675481565b60006114736118c1565b6001600160a01b03163314905060008061148b61197d565b6001600160a01b03166316b2213f336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156114d757600080fd5b505afa1580156114eb573d6000803e3d6000fd5b505050506040513d602081101561150157600080fd5b50511415905081806115105750805b61154b5760405162461bcd60e51b8152600401808060200182810382526021815260200180612e986021913960400191505060405180910390fd5b61157761156360675485611a3490919063ffffffff16565b61156d6000611a0a565b600301549061185e565b6115816000611a0a565b60030155505050565b600381565b60006115a161159c61185a565b611e53565b905090565b600054610100900460ff16806115bf57506115bf611fb2565b806115cd575060005460ff16155b6116085760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015611633576000805460ff1961ff0019909116610100171660011790555b600a73__$22e4fd0786f9bb9222b95fc3343146c524$__63907af6c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561167957600080fd5b505af415801561168d573d6000803e3d6000fd5b505050506040513d60208110156116a357600080fd5b5051816116ac57fe5b048310611700576040805162461bcd60e51b815260206004820152601c60248201527f72617465203c204d41585f45584348414e47455f4645455f5241544500000000604482015290519081900360640190fd5b611708611fc3565b61171182612074565b62093a80607b55606a83905560016067558015611734576000805461ff00191690555b505050565b607c5481565b7343707c6bb6202a5e1007356539a925c052ea976781565b61175f61185a565b6001600160a01b0316611770611445565b6001600160a01b0316146117b9576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b6001600160a01b0381166117fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180612da06026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156118b8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6065546040805163dacb2d0160e01b81526822bc31b430b733b2b960b91b600482015260248101829052601960448201527f4d697373696e672045786368616e676572206164647265737300000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d602081101561197657600080fd5b5051905090565b6065546040805163dacb2d0160e01b81526a29bcb73a3432b9b4bd32b960a91b600482015260248101829052601b60448201527f4d697373696e672053796e74686573697a657220616464726573730000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b6000606b600360ff1683607a540181611a1f57fe5b0660038110611a2a57fe5b6005020192915050565b600082611a43575060006118bb565b82820282848281611a5057fe5b04146118b85760405162461bcd60e51b8152600401808060200182810382526021815260200180612e576021913960400191505060405180910390fd5b6000808211611ae3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611aec57fe5b049392505050565b60008060038310611b365760405162461bcd60e51b8152600401808060200182810382526023815260200180612dc66023913960400191505060405180910390fd5b6001600160a01b03841660009081526069602052604090208360038110611b5957fe5b60020201546001600160a01b03851660009081526069602052604090209092508360038110611b8457fe5b600202016001015490509250929050565b60008083611ba857506000905080611c3a565b838515611bea576000611bd96001611bc260018a03611a0a565b54600160401b90046001600160401b031690611c42565b9050611be6818787612128565b9150505b6000611c0382611bf989611a0a565b6001015490611de7565b90506000611c1e83611c148a611a0a565b6003015490611de7565b9050611c2982612235565b611c3282612235565b945094505050505b935093915050565b600082821115611c99576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080611caa612d3a565b6001600160a01b0385166000908152606960205260408082208151606081019092529091600390835b82821015611d0f578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611cd3565b50505050905060005b6003811015611d7657818160038110611d2d57fe5b6020020151602001518510611d6e57818160038110611d4857fe5b602002015151828260038110611d5a57fe5b602002015160200151935093505050611d79565b600101611d18565b50505b9250929050565b6000808211611dd6576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b818381611ddf57fe5b069392505050565b6000670de0b6b3a7640000611dfc8484611a34565b81611aec57fe5b6001600160a01b038416600090815260696020526040902060010154811115611e2f57611e2f84612257565b506001600160a01b0392909216600090815260696020526040902090815560010155565b600080808080611e6286610f99565b611eb3576040805162461bcd60e51b815260206004820152601f60248201527f432d526174696f2062656c6f772070656e616c7479207468726573686f6c6400604482015290519081900360640190fd5b611ebc86610654565b909250905081151580611ecf5750600081115b611f0a5760405162461bcd60e51b8152600401808060200182810382526040815260200180612de96040913960400191505060405180910390fd5b611f2786611f186001611a0a565b546001600160401b0316612325565b8115611f4257611f3682612341565b9250611f428684612405565b8015611f5d57611f518161267c565b9350611f5d868561273e565b604080516001600160a01b03881681526020810185905280820186905290517f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c79181900360600190a150600195945050505050565b6000611fbd30612942565b15905090565b600054610100900460ff1680611fdc5750611fdc611fb2565b80611fea575060005460ff16155b6120255760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612050576000805460ff1961ff0019909116610100171660011790555b612058612948565b6120606129e8565b801561133b576000805461ff001916905550565b600054610100900460ff168061208d575061208d611fb2565b8061209b575060005460ff16155b6120d65760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612101576000805460ff1961ff0019909116610100171660011790555b612109611fc3565b61211282612ae1565b8015612124576000805461ff00191690555b5050565b60008061222c8461222661213a61197d565b6001600160a01b03166308d95cd5876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561217d57600080fd5b505afa158015612191573d6000803e3d6000fd5b505050506040513d60208110156121a757600080fd5b50516121b161197d565b6001600160a01b03166308d95cd58a6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156121f457600080fd5b505afa158015612208573d6000803e3d6000fd5b505050506040513d602081101561221e57600080fd5b505190612b9e565b90612bb7565b95945050505050565b60006305f5e10082046005600a82061061224d57600a015b600a900492915050565b60015b6003811015612124576001600160a01b03821660009081526069602052604090206001820190826003811061228b57fe5b60020201546001600160a01b038416600090815260696020526040902082600381106122b357fe5b60020201556001600160a01b038316600090815260696020526040902082600381106122db57fe5b600202016001015460696000856001600160a01b03166001600160a01b03168152602001908152602001600020826003811061231357fe5b6002020160010155506000190161225a565b6001600160a01b03909116600090815260686020526040902055565b6000818160025b60038110156123fd57600061235c82611a0a565b600201549050600061237b8261237185611a0a565b6001015490611c42565b905080156123f25760008582106123925785612394565b815b90506123a0838261185e565b6123a985611a0a565b600201556123b78682611c42565b95506123c3858261185e565b9450856123d85784965050505050505061064f565b831580156123e65750600086115b156123f057600095505b505b505060001901612348565b509392505050565b816001600160a01b0381167343707c6bb6202a5e1007356539a925c052ea97671415612472576040805162461bcd60e51b8152602060048201526017602482015276119959481859191c995cdcc81b9bdd08185b1b1bddd959604a1b604482015290519081900360640190fd5b6001600160a01b03831615158061249257506001600160a01b0383163014155b806124b657506124a061197d565b6001600160a01b0316836001600160a01b031614155b612507576040805162461bcd60e51b815260206004820152601f60248201527f43616e27742073656e64206665657320746f2074686973206164647265737300604482015290519081900360640190fd5b600061251161197d565b6001600160a01b031663326080396514da185554d160d21b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561255d57600080fd5b505afa158015612571573d6000803e3d6000fd5b505050506040513d602081101561258757600080fd5b505160408051632770a7eb60e21b81527343707c6bb6202a5e1007356539a925c052ea976760048201526024810186905290519192506001600160a01b03831691639dc29fac9160448082019260009290919082900301818387803b1580156125ef57600080fd5b505af1158015612603573d6000803e3d6000fd5b50505050806001600160a01b031663867904b485856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561265e57600080fd5b505af1158015612672573d6000803e3d6000fd5b5050505050505050565b6000818160025b60038110156123fd5760006126b161269a83611a0a565b600401546126a784611a0a565b6003015490611c42565b905080156127345760008482106126c857846126ca565b815b90506126e3816126d985611a0a565b600401549061185e565b6126ec84611a0a565b600401556126fa8582611c42565b9450612706848261185e565b93508461271a57839550505050505061064f565b821580156127285750600085115b1561273257600094505b505b5060001901612683565b816001600160a01b0381167343707c6bb6202a5e1007356539a925c052ea976714156127ab576040805162461bcd60e51b8152602060048201526017602482015276119959481859191c995cdcc81b9bdd08185b1b1bddd959604a1b604482015290519081900360640190fd5b6001600160a01b0383166127fb576040805162461bcd60e51b815260206004820152601260248201527104163636f756e742063616e277420626520360741b604482015290519081900360640190fd5b6001600160a01b038316301415612859576040805162461bcd60e51b815260206004820152601e60248201527f43616e27742073656e64207265776172647320746f2066656520706f6f6c0000604482015290519081900360640190fd5b61286161197d565b6001600160a01b0316836001600160a01b031614156128c7576040805162461bcd60e51b815260206004820152601d60248201527f43616e27742073656e64207265776172647320746f20736861646f7773000000604482015290519081900360640190fd5b6128cf612bd0565b6001600160a01b031663b5ddb9c784846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561292557600080fd5b505af1158015612939573d6000803e3d6000fd5b50505050505050565b3b151590565b600054610100900460ff16806129615750612961611fb2565b8061296f575060005460ff16155b6129aa5760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612060576000805460ff1961ff001990911661010017166001179055801561133b576000805461ff001916905550565b600054610100900460ff1680612a015750612a01611fb2565b80612a0f575060005460ff16155b612a4a5760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612a75576000805460ff1961ff0019909116610100171660011790555b6000612a7f61185a565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561133b576000805461ff001916905550565b600054610100900460ff1680612afa5750612afa611fb2565b80612b08575060005460ff16155b612b435760405162461bcd60e51b815260040180806020018281038252602e815260200180612e29602e913960400191505060405180910390fd5b600054610100900460ff16158015612b6e576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384161790558015612124576000805461ff00191690555050565b60006118b883836b033b2e3c9fd0803ce8000000612c5e565b60006118b883836b033b2e3c9fd0803ce8000000612c90565b6065546040805163dacb2d0160e01b81526b526577617264457363726f7760a01b600482015260248101829052601c60448201527f4d697373696e6720526577617264457363726f77206164647265737300000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561194c57600080fd5b600080612c728461091487600a8702611a34565b90506005600a825b0610612c8457600a015b600a9004949350505050565b600080600a8304612ca18686611a34565b81612ca857fe5b0490506005600a82612c7a565b60405180606001604052806003905b612ccc612d67565b815260200190600190039081612cc45790505090565b6040518060e0016040528060006001600160401b0316815260200160006001600160401b0316815260200160006001600160401b03168152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806003905b612d51612d85565b815260200190600190039081612d495790505090565b60405180604001604052806002906020820280368337509192915050565b60405180604001604052806000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373696e646578206578636565647320746865204645455f504552494f445f4c454e4754484e6f2066656573206f72207265776172647320617661696c61626c6520666f7220706572696f642c206f72206665657320616c726561647920636c61696d6564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f6e6c792045786368616e6765722c2053796e74687320417574686f7269736564a2646970667358221220ecd6e2e01fd697dcf3ee1521b689f1ed1a35f078b2a5d508c6f13f3f4245e08f64736f6c63430007010033",
  "libraries": {
    "SafeDecimalMath": "0xD4467753Eb04D2fE0C8BFF17c54Ba5332ee94E69"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "appendAccountIssuanceRecord(address,uint256,uint256)": {
        "details": "onlyIssuer to call me on shadows.issue() & shadows.burn() calls to store the locked DOWS per fee period so we know to allocate the correct proportions of fees and rewards per period"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "closeCurrentFeePeriod()": {
        "notice": "Close the current fee period and start a new one."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 595,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 598,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1615,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9671,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "resolver",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(AddressResolver)9659"
      },
      {
        "astId": 2972,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "feePool",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 2982,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "BONUS_REWARDS",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 2986,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "lastFeeWithdrawalStorage",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2992,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "accountIssuanceLedger",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_array(t_struct(IssuanceData)2977_storage)3_storage)"
      },
      {
        "astId": 2994,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "exchangeFeeRate",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 3019,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "_recentFeePeriods",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_struct(FeePeriod)3015_storage)3_storage"
      },
      {
        "astId": 3021,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "_currentFeePeriod",
        "offset": 0,
        "slot": "122",
        "type": "t_uint256"
      },
      {
        "astId": 3023,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "feePeriodDuration",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 3025,
        "contract": "contracts/FeePool.sol:FeePool",
        "label": "targetThreshold",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FeePeriod)3015_storage)3_storage": {
        "base": "t_struct(FeePeriod)3015_storage",
        "encoding": "inplace",
        "label": "struct FeePool.FeePeriod[3]",
        "numberOfBytes": "480"
      },
      "t_array(t_struct(IssuanceData)2977_storage)3_storage": {
        "base": "t_struct(IssuanceData)2977_storage",
        "encoding": "inplace",
        "label": "struct FeePool.IssuanceData[3]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressResolver)9659": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(IssuanceData)2977_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeePool.IssuanceData[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(IssuanceData)2977_storage)3_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FeePeriod)3015_storage": {
        "encoding": "inplace",
        "label": "struct FeePool.FeePeriod",
        "members": [
          {
            "astId": 3002,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "feePeriodId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3004,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "startingDebtIndex",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3006,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "startTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3008,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "feesToDistribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3010,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "feesClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3012,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "rewardsToDistribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3014,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "rewardsClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(IssuanceData)2977_storage": {
        "encoding": "inplace",
        "label": "struct FeePool.IssuanceData",
        "members": [
          {
            "astId": 2974,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "debtPercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2976,
            "contract": "contracts/FeePool.sol:FeePool",
            "label": "debtEntryIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}