{
  "address": "0xc0A2322C4b82849baB543f1feedCf4c0ed2982EA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "ResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Vested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "VestingEntryCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_VESTING_ENTRIES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "appendVestingEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkAccountSchedule",
      "outputs": [
        {
          "internalType": "uint256[520]",
          "name": "",
          "type": "uint256[520]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNextVestingEntry",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNextVestingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNextVestingQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNextVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingScheduleEntry",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numVestingEntries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestingScheduleTime",
          "type": "uint256"
        }
      ],
      "name": "setVestingScheduleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalEscrowedAccountBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEscrowedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalVestedAccountBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vestBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingScheduleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestingSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7b12b4e520869b47c73d7160993a0eec3e747a670247d74cd4d38ee74a7cb76",
  "receipt": {
    "to": null,
    "from": "0x86fEEC47662304cbcd27160e5e95AEfdC341b806",
    "contractAddress": "0xc0A2322C4b82849baB543f1feedCf4c0ed2982EA",
    "transactionIndex": 272,
    "gasUsed": "1408408",
    "logsBloom": "0x
    "blockHash": "0x4fca99466e1ec017d39ffcef442aebddbf476db6ac1b6de7fabb783213881969",
    "transactionHash": "0xc7b12b4e520869b47c73d7160993a0eec3e747a670247d74cd4d38ee74a7cb76",
    "logs": [],
    "blockNumber": 12179960,
    "cumulativeGasUsed": "43837592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "611ad21f2cc27ca1aec47c6161804b2f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"VestingEntryCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_VESTING_ENTRIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"appendVestingEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAccountSchedule\",\"outputs\":[{\"internalType\":\"uint256[520]\",\"name\":\"\",\"type\":\"uint256[520]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextVestingEntry\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextVestingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextVestingQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleEntry\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numVestingEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingScheduleTime\",\"type\":\"uint256\"}],\"name\":\"setVestingScheduleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEscrowedAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEscrowedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVestedAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingScheduleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appendVestingEntry(address,uint256)\":{\"details\":\"A call to this should accompany a previous successful call to shadows.transfer(rewardEscrow, amount), to ensure that when the funds are withdrawn, there is enough balance. Note; although this function could technically be used to produce unbounded arrays, it's only withinn the 4 year period of the weekly inflation schedule.\",\"params\":{\"account\":\"The account to append a new vesting entry to.\",\"quantity\":\"The quantity of DOWS that will be escrowed.\"}},\"checkAccountSchedule(address)\":{\"details\":\"For DApps to display the vesting schedule for the inflationary supply over 5 years. Solidity cant return variable length arrays so this is returning pairs of data. Vesting Time at [0] and quantity at [1] and so on\"},\"getNextVestingEntry(address)\":{\"returns\":{\"_0\":\"A pair of uints: (timestamp, shadows quantity). \"}},\"getVestingScheduleEntry(address,uint256)\":{\"returns\":{\"_0\":\"A pair of uints: (timestamp, shadows quantity).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"appendVestingEntry(address,uint256)\":{\"notice\":\"Add a new vesting entry at a given time and quantity to an account's schedule.\"},\"checkAccountSchedule(address)\":{\"notice\":\"return the full vesting schedule entries vest for a given user.\"},\"getNextVestingEntry(address)\":{\"notice\":\"Obtain the next schedule entry that will vest for a given user.\"},\"getNextVestingIndex(address)\":{\"notice\":\"Obtain the index of the next schedule entry that will vest for a given user.\"},\"getNextVestingQuantity(address)\":{\"notice\":\"Obtain the quantity which the next schedule entry will vest for a given user.\"},\"getNextVestingTime(address)\":{\"notice\":\"Obtain the time at which the next schedule entry will vest for a given user.\"},\"getVestingQuantity(address,uint256)\":{\"notice\":\"Get the quantity of DOWS associated with a given schedule entry.\"},\"getVestingScheduleEntry(address,uint256)\":{\"notice\":\"Get a particular schedule entry for an account.\"},\"getVestingTime(address,uint256)\":{\"notice\":\"Get the time at which a given schedule entry will vest.\"},\"numVestingEntries(address)\":{\"notice\":\"The number of vesting dates in an account's schedule.\"},\"vest()\":{\"notice\":\"Allow a user to withdraw any DOWS in their schedule that have vested.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardEscrow.sol\":\"RewardEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/RewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./library/AddressResolverUpgradeable.sol\\\";\\nimport \\\"./library/SafeDecimalMath.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/IShadows.sol\\\";\\n\\n/*\\nDOWS rewards are escrowed for 1 year from the claim date and users\\ncan call vest in 6 months time.\\n*/\\ncontract RewardEscrow is\\n    Initializable,\\n    OwnableUpgradeable,\\n    AddressResolverUpgradeable\\n{\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /* Lists of (timestamp, quantity) pairs per account, sorted in ascending time order.\\n     * These are the times at which each given quantity of DOWS vests. */\\n    mapping(address => uint256[2][]) public vestingSchedules;\\n\\n    /* An account's total escrowed shadows balance to save recomputing this for fee extraction purposes. */\\n    mapping(address => uint256) public totalEscrowedAccountBalance;\\n\\n    /* An account's total vested reward shadows. */\\n    mapping(address => uint256) public totalVestedAccountBalance;\\n\\n    /* The total remaining escrowed balance, for verifying the actual shadows balance of this contract against. */\\n    uint256 public totalEscrowedBalance;\\n\\n    uint256 constant TIME_INDEX = 0;\\n    uint256 constant QUANTITY_INDEX = 1;\\n\\n    /* Limit vesting entries to disallow unbounded iteration over vesting schedules.\\n     * There are 5 years of the supply schedule */\\n    uint256 public constant MAX_VESTING_ENTRIES = 52 * 5;\\n    uint256 public vestingScheduleTime;\\n\\n    function initialize(address _resolver) external initializer {\\n        __Ownable_init();\\n        __AddressResolver_init(_resolver);\\n        vestingScheduleTime = 4 weeks;\\n    }\\n\\n    function setVestingScheduleTime(uint256 _vestingScheduleTime) public onlyOwner {\\n        vestingScheduleTime = _vestingScheduleTime;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return totalEscrowedAccountBalance[account];\\n    }\\n\\n    function vestBalanceOf(address account) public view returns (uint256) {\\n        return totalVestedAccountBalance[account];\\n    }\\n\\n    /**\\n     * @notice The number of vesting dates in an account's schedule.\\n     */\\n    function numVestingEntries(address account) public view returns (uint256) {\\n        return vestingSchedules[account].length;\\n    }\\n\\n    /**\\n     * @notice Get a particular schedule entry for an account.\\n     * @return A pair of uints: (timestamp, shadows quantity).\\n     */\\n    function getVestingScheduleEntry(address account, uint256 index)\\n        public\\n        view\\n        returns (uint256[2] memory)\\n    {\\n        return vestingSchedules[account][index];\\n    }\\n\\n    /**\\n     * @notice Get the time at which a given schedule entry will vest.\\n     */\\n    function getVestingTime(address account, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getVestingScheduleEntry(account, index)[TIME_INDEX];\\n    }\\n\\n    /**\\n     * @notice Get the quantity of DOWS associated with a given schedule entry.\\n     */\\n    function getVestingQuantity(address account, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];\\n    }\\n\\n    /**\\n     * @notice Obtain the index of the next schedule entry that will vest for a given user.\\n     */\\n    function getNextVestingIndex(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 len = numVestingEntries(account);\\n        for (uint256 i = 0; i < len; i++) {\\n            if (getVestingTime(account, i) != 0) {\\n                return i;\\n            }\\n        }\\n        return len;\\n    }\\n\\n    /**\\n     * @notice Obtain the next schedule entry that will vest for a given user.\\n     * @return A pair of uints: (timestamp, shadows quantity). */\\n    function getNextVestingEntry(address account)\\n        public\\n        view\\n        returns (uint256[2] memory)\\n    {\\n        uint256 index = getNextVestingIndex(account);\\n        if (index == numVestingEntries(account)) {\\n            return [uint256(0), 0];\\n        }\\n        return getVestingScheduleEntry(account, index);\\n    }\\n\\n    /**\\n     * @notice Obtain the time at which the next schedule entry will vest for a given user.\\n     */\\n    function getNextVestingTime(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return getNextVestingEntry(account)[TIME_INDEX];\\n    }\\n\\n    /**\\n     * @notice Obtain the quantity which the next schedule entry will vest for a given user.\\n     */\\n    function getNextVestingQuantity(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return getNextVestingEntry(account)[QUANTITY_INDEX];\\n    }\\n\\n    /**\\n     * @notice return the full vesting schedule entries vest for a given user.\\n     * @dev For DApps to display the vesting schedule for the\\n     * inflationary supply over 5 years. Solidity cant return variable length arrays\\n     * so this is returning pairs of data. Vesting Time at [0] and quantity at [1] and so on\\n     */\\n    function checkAccountSchedule(address account)\\n        public\\n        view\\n        returns (uint256[520] memory)\\n    {\\n        uint256[520] memory _result;\\n        uint256 schedules = numVestingEntries(account);\\n        for (uint256 i = 0; i < schedules; i++) {\\n            uint256[2] memory pair = getVestingScheduleEntry(account, i);\\n            _result[i * 2] = pair[0];\\n            _result[i * 2 + 1] = pair[1];\\n        }\\n        return _result;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\\n     * @dev A call to this should accompany a previous successful call to shadows.transfer(rewardEscrow, amount),\\n     * to ensure that when the funds are withdrawn, there is enough balance.\\n     * Note; although this function could technically be used to produce unbounded\\n     * arrays, it's only withinn the 4 year period of the weekly inflation schedule.\\n     * @param account The account to append a new vesting entry to.\\n     * @param quantity The quantity of DOWS that will be escrowed.\\n     */\\n    function appendVestingEntry(address account, uint256 quantity)\\n        public\\n        onlyFeePool\\n    {\\n        /* No empty or already-passed vesting entries allowed. */\\n        require(quantity != 0, \\\"Quantity cannot be zero\\\");\\n\\n        /* There must be enough balance in the contract to provide for the vesting entry. */\\n        totalEscrowedBalance = totalEscrowedBalance.add(quantity);\\n        require(\\n            totalEscrowedBalance <= shadows().balanceOf(address(this)),\\n            \\\"Must be enough balance in the contract to provide for the vesting entry\\\"\\n        );\\n\\n        /* Disallow arbitrarily long vesting schedules in light of the gas limit. */\\n        uint256 scheduleLength = vestingSchedules[account].length;\\n        require(\\n            scheduleLength <= MAX_VESTING_ENTRIES,\\n            \\\"Vesting schedule is too long\\\"\\n        );\\n\\n        /* Escrow the tokens for 1 year. */\\n        uint256 time = block.timestamp + vestingScheduleTime;\\n\\n        if (scheduleLength == 0) {\\n            totalEscrowedAccountBalance[account] = quantity;\\n        } else {\\n            /* Disallow adding new vested DOWS earlier than the last one.\\n             * Since entries are only appended, this means that no vesting date can be repeated. */\\n            require(\\n                getVestingTime(account, scheduleLength - 1) < time,\\n                \\\"Cannot add new vested entries earlier than the last one\\\"\\n            );\\n            totalEscrowedAccountBalance[account] = totalEscrowedAccountBalance[\\n                account\\n            ]\\n                .add(quantity);\\n        }\\n\\n        vestingSchedules[account].push([time, quantity]);\\n\\n        emit VestingEntryCreated(account, block.timestamp, quantity);\\n    }\\n\\n    /**\\n     * @notice Allow a user to withdraw any DOWS in their schedule that have vested.\\n     */\\n    function vest() external {\\n        uint256 numEntries = numVestingEntries(msg.sender);\\n        uint256 total;\\n        for (uint256 i = 0; i < numEntries; i++) {\\n            uint256 time = getVestingTime(msg.sender, i);\\n            /* The list is sorted; when we reach the first future time, bail out. */\\n            if (time > block.timestamp) {\\n                break;\\n            }\\n            uint256 qty = getVestingQuantity(msg.sender, i);\\n            if (qty == 0) {\\n                continue;\\n            }\\n\\n            vestingSchedules[msg.sender][i] = [0, 0];\\n            total = total.add(qty);\\n        }\\n\\n        if (total != 0) {\\n            totalEscrowedBalance = totalEscrowedBalance.sub(total);\\n            totalEscrowedAccountBalance[\\n                msg.sender\\n            ] = totalEscrowedAccountBalance[msg.sender].sub(total);\\n            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[\\n                msg.sender\\n            ]\\n                .add(total);\\n            shadows().transfer(msg.sender, total);\\n            emit Vested(msg.sender, block.timestamp, total);\\n        }\\n    }\\n\\n    function shadows() internal view returns (IShadows) {\\n        return\\n            IShadows(\\n                resolver.requireAndGetAddress(\\n                    \\\"Shadows\\\",\\n                    \\\"Missing Shadows address\\\"\\n                )\\n            );\\n    }\\n\\n    function feePool() internal view returns (IFeePool) {\\n        return\\n            IFeePool(\\n                resolver.requireAndGetAddress(\\n                    \\\"FeePool\\\",\\n                    \\\"Missing FeePool address\\\"\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyFeePool() {\\n        bool isFeePool = msg.sender == address(feePool());\\n\\n        require(\\n            isFeePool,\\n            \\\"Only the FeePool contracts can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    event Vested(address indexed beneficiary, uint256 time, uint256 value);\\n\\n    event VestingEntryCreated(\\n        address indexed beneficiary,\\n        uint256 time,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xbf35d334327ad414ff674bffcfeea71be1b7378b8ad310fb4813876a34a1d55d\",\"license\":\"MIT\"},\"contracts/interfaces/IFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @title FeePool Interface\\n */\\nabstract contract IFeePool {\\n\\n    address public FEE_ADDRESS;\\n    uint public exchangeFeeRate;\\n\\n    function amountReceivedFromExchange(uint value) virtual external view returns (uint);\\n\\n    function amountReceivedFromTransfer(uint value) virtual external view returns (uint);\\n\\n    function recordFeePaid(uint xUSDAmount) virtual external;\\n\\n    function recordRewardPaid(uint xUSDAmount) virtual external;\\n\\n    function appendAccountIssuanceRecord(address account, uint lockedAmount, uint debtEntryIndex) virtual external;\\n\\n    function setRewardsToDistribute(uint amount) virtual external;\\n}\\n\",\"keccak256\":\"0x1c880160c6a9f5eac13a853c127ca3f0f61d28d54a0e46c41b5f40ccfc79db49\",\"license\":\"MI\"},\"contracts/interfaces/IShadows.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract IShadows {\\n    uint256 public totalSupply;\\n\\n    uint256 public issuanceRatio;\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual returns (bool);\\n}\",\"keccak256\":\"0x7e1a15f2a2aa5fb07c7fc2ff96020126a9b26a22ac5d36809c77b327c72d1693\",\"license\":\"MI\"},\"contracts/library/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) public onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n        for (uint i = 0; i < names.length; i++) {\\n            require(Address.isContract(destinations[i]), \\\"Must be contract address\\\");\\n            repository[names[i]] = destinations[i];\\n        }\\n    }\\n\\n    function getAddress(bytes32 name) public view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) public view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xc807a2e702f29215ea3ab06b849af2c24cc383c89812450108ef70a695259d8e\",\"license\":\"MIT\"},\"contracts/library/AddressResolverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./AddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract AddressResolverUpgradeable is Initializable, OwnableUpgradeable {\\n    AddressResolver public resolver;\\n\\n    function __AddressResolver_init(address _resolver) internal initializer {\\n        __Ownable_init();\\n        __AddressResolver_init_unchained(_resolver);\\n    }\\n\\n    function __AddressResolver_init_unchained(address _resolver)\\n        internal\\n        initializer\\n    {\\n        resolver = AddressResolver(_resolver);\\n    }\\n\\n    function setResolver(AddressResolver _resolver) public onlyOwner {\\n        resolver = _resolver;\\n        emit ResolverUpdated(_resolver);\\n    }\\n\\n    event ResolverUpdated(AddressResolver _resolver);\\n}\\n\",\"keccak256\":\"0x6f22f48a973a70e16f73edffd2a7f70cd93b8c6f5e79a0b93e7d2b73569079a6\",\"license\":\"MIT\"},\"contracts/library/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Safely manipulate unsigned fixed-point decimals at a given precision level.\\n * @dev Functions accepting uints in this contract and derived contracts\\n * are taken to be such fixed point decimals of a specified precision (either standard\\n * or high).\\n */\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /** \\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /** \\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     * \\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     * \\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(uint x, uint y, uint precisionUnit) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\\n\",\"keccak256\":\"0x2ab536c6443a49d84c540b3f7c552cfcd64e00e8c932e4930a53c6805381bb67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611886806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806371e780f3116100de578063c4d66de811610097578063e33d28d711610071578063e33d28d7146104a4578063ee1d036c146104ca578063f2fde38b146104f6578063f520da071461051c5761018e565b8063c4d66de81461044a578063d0cc82e314610470578063da7bd3e9146104785761018e565b806371e780f3146103b45780638da5cb5b146103bc57806397f46527146103c45780639b217f90146103ea578063b3b26d6a14610416578063b5ddb9c71461041e5761018e565b8063449d0eb11161014b5780634e543b26116101255780634e543b261461033a5780636b3905c41461036057806370a0823114610386578063715018a6146103ac5761018e565b8063449d0eb1146102c2578063458efde3146102fe57806345e5441f146103085761018e565b806304f3bcec1461019357806319e740c0146101b7578063204b676a146101ef578063227d517a146102155780632f5bb6611461023b578063326a3cfb1461029c575b600080fd5b61019b610539565b604080516001600160a01b039092168252519081900360200190f35b6101dd600480360360208110156101cd57600080fd5b50356001600160a01b0316610548565b60408051918252519081900360200190f35b6101dd6004803603602081101561020557600080fd5b50356001600160a01b031661058a565b6101dd6004803603602081101561022b57600080fd5b50356001600160a01b03166105a5565b6102616004803603602081101561025157600080fd5b50356001600160a01b03166105b7565b6040518082600260200280838360005b83811015610289578181015183820152602001610271565b5050505090500191505060405180910390f35b6101dd600480360360208110156102b257600080fd5b50356001600160a01b0316610608565b6102e8600480360360208110156102d857600080fd5b50356001600160a01b031661061a565b6040518151815280826141008083836020610271565b6103066106a0565b005b6101dd6004803603606081101561031e57600080fd5b506001600160a01b038135169060208101359060400135610880565b6103066004803603602081101561035057600080fd5b50356001600160a01b03166108bc565b6101dd6004803603602081101561037657600080fd5b50356001600160a01b0316610972565b6101dd6004803603602081101561039c57600080fd5b50356001600160a01b031661098b565b6103066109a6565b6101dd610a52565b61019b610a58565b6101dd600480360360208110156103da57600080fd5b50356001600160a01b0316610a67565b6101dd6004803603604081101561040057600080fd5b506001600160a01b038135169060200135610a79565b6101dd610a94565b6103066004803603604081101561043457600080fd5b506001600160a01b038135169060200135610a9a565b6103066004803603602081101561046057600080fd5b50356001600160a01b0316610dd1565b6101dd610e8b565b6102616004803603604081101561048e57600080fd5b506001600160a01b038135169060200135610e91565b6101dd600480360360208110156104ba57600080fd5b50356001600160a01b0316610f00565b6101dd600480360360408110156104e057600080fd5b506001600160a01b038135169060200135610f1b565b6103066004803603602081101561050c57600080fd5b50356001600160a01b0316610f2e565b6103066004803603602081101561053257600080fd5b5035611031565b6065546001600160a01b031681565b6000806105548361058a565b905060005b818110156105815761056b8482610a79565b156105795791506105859050565b600101610559565b5090505b919050565b6001600160a01b031660009081526066602052604090205490565b60686020526000908152604090205481565b6105bf611668565b60006105ca83610548565b90506105d58361058a565b8114156105f75750506040805180820190915260008082526020820152610585565b6106018382610e91565b9392505050565b60676020526000908152604090205481565b610622611686565b61062a611686565b60006106358461058a565b905060005b818110156106975761064a611668565b6106548683610e91565b80519091508460028402610208811061066957fe5b602002015280600160200201518483600202600101610208811061068957fe5b60200201525060010161063a565b50909392505050565b60006106ab3361058a565b90506000805b828110156107505760006106c53383610a79565b9050428111156106d55750610750565b60006106e13384610f1b565b9050806106ef575050610748565b60408051808201825260008082526020808301829052338252606690529190912080548590811061071c57fe5b90600052602060002090600202019060026107389291906116a6565b506107438482611098565b935050505b6001016106b1565b50801561087c5760695461076490826110f2565b6069553360009081526067602052604090205461078190826110f2565b336000908152606760209081526040808320939093556068905220546107a79082611098565b336000908152606860205260409020556107bf61114f565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050506040513d602081101561083f57600080fd5b50506040805142815260208101839052815133927ffbeff59d2bfda0d79ea8a29f8c57c66d48c7a13eabbdb90908d9115ec41c9dc6928290030190a25b5050565b6066602052826000526040600020828154811061089957fe5b906000526020600020906002020181600281106108b257fe5b0154925083915050565b6108c4611209565b6001600160a01b03166108d5610a58565b6001600160a01b03161461091e576040805162461bcd60e51b815260206004820181905260248201526000805160206117ff833981519152604482015290519081900360640190fd5b606580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f15cd6d20bba01b3fcb790c73829dd07412cbdf689ef818c96a2505889f3736a29181900360200190a150565b600061097d826105b7565b60005b602002015192915050565b6001600160a01b031660009081526067602052604090205490565b6109ae611209565b6001600160a01b03166109bf610a58565b6001600160a01b031614610a08576040805162461bcd60e51b815260206004820181905260248201526000805160206117ff833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60695481565b6033546001600160a01b031690565b6000610a72826105b7565b6001610980565b6000610a858383610e91565b60005b60200201519392505050565b606a5481565b6000610aa461120d565b6001600160a01b0316336001600160a01b031614905080610af65760405162461bcd60e51b815260040180806020018281038252603281526020018061181f6032913960400191505060405180910390fd5b81610b48576040805162461bcd60e51b815260206004820152601760248201527f5175616e746974792063616e6e6f74206265207a65726f000000000000000000604482015290519081900360640190fd5b606954610b559083611098565b606955610b6061114f565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bac57600080fd5b505afa158015610bc0573d6000803e3d6000fd5b505050506040513d6020811015610bd657600080fd5b50516069541115610c185760405162461bcd60e51b815260040180806020018281038252604781526020018061178a6047913960600191505060405180910390fd5b6001600160a01b038316600090815260666020526040902054610104811115610c88576040805162461bcd60e51b815260206004820152601c60248201527f56657374696e67207363686564756c6520697320746f6f206c6f6e6700000000604482015290519081900360640190fd5b606a54420181610cb2576001600160a01b0385166000908152606760205260409020849055610d39565b80610cc08660018503610a79565b10610cfc5760405162461bcd60e51b81526004018080602001828103825260378152602001806117536037913960400191505060405180910390fd5b6001600160a01b038516600090815260676020526040902054610d1f9085611098565b6001600160a01b0386166000908152606760205260409020555b6001600160a01b03851660009081526066602090815260408083208151808301909252848252818301889052805460018101825590845291909220610d86926002928302909101916116e9565b50604080514281526020810186905281516001600160a01b038816927fedd34dc5a5ea12bd847909801d0660781b50e26c7f4cec3c7b308f1ea410635c928290030190a25050505050565b600054610100900460ff1680610dea5750610dea611296565b80610df8575060005460ff16155b610e335760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff16158015610e5e576000805460ff1961ff0019909116610100171660011790555b610e666112a7565b610e6f82611359565b6224ea00606a55801561087c576000805461ff00191690555050565b61010481565b610e99611668565b6001600160a01b0383166000908152606660205260409020805483908110610ebd57fe5b600091825260209091206040805180820191829052926002908102909201919082845b815481526020019060010190808311610ee0575050505050905092915050565b6001600160a01b031660009081526068602052604090205490565b6000610f278383610e91565b6001610a88565b610f36611209565b6001600160a01b0316610f47610a58565b6001600160a01b031614610f90576040805162461bcd60e51b815260206004820181905260248201526000805160206117ff833981519152604482015290519081900360640190fd5b6001600160a01b038116610fd55760405162461bcd60e51b815260040180806020018281038252602681526020018061172d6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b611039611209565b6001600160a01b031661104a610a58565b6001600160a01b031614611093576040805162461bcd60e51b815260206004820181905260248201526000805160206117ff833981519152604482015290519081900360640190fd5b606a55565b600082820183811015610601576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611149576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6065546040805163dacb2d0160e01b815266536861646f777360c81b600482015260248101829052601760448201527f4d697373696e6720536861646f77732061646472657373000000000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d602081101561120257600080fd5b5051905090565b3390565b6065546040805163dacb2d0160e01b815266119959541bdbdb60ca1b600482015260248101829052601760448201527f4d697373696e6720466565506f6f6c2061646472657373000000000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b1580156111d857600080fd5b60006112a13061140c565b15905090565b600054610100900460ff16806112c057506112c0611296565b806112ce575060005460ff16155b6113095760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff16158015611334576000805460ff1961ff0019909116610100171660011790555b61133c611412565b6113446114b2565b8015611356576000805461ff00191690555b50565b600054610100900460ff16806113725750611372611296565b80611380575060005460ff16155b6113bb5760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff161580156113e6576000805460ff1961ff0019909116610100171660011790555b6113ee6112a7565b6113f7826115ab565b801561087c576000805461ff00191690555050565b3b151590565b600054610100900460ff168061142b575061142b611296565b80611439575060005460ff16155b6114745760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff16158015611344576000805460ff1961ff0019909116610100171660011790558015611356576000805461ff001916905550565b600054610100900460ff16806114cb57506114cb611296565b806114d9575060005460ff16155b6115145760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff1615801561153f576000805460ff1961ff0019909116610100171660011790555b6000611549611209565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611356576000805461ff001916905550565b600054610100900460ff16806115c457506115c4611296565b806115d2575060005460ff16155b61160d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806117d1602e913960400191505060405180910390fd5b600054610100900460ff16158015611638576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b038416179055801561087c576000805461ff00191690555050565b60405180604001604052806002906020820280368337509192915050565b604051806141000160405280610208906020820280368337509192915050565b82600281019282156116d9579160200282015b828111156116d9578251829060ff169055916020019190600101906116b9565b506116e5929150611717565b5090565b82600281019282156116d9579160200282015b828111156116d95782518255916020019190600101906116fc565b5b808211156116e5576000815560010161171856fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616e6e6f7420616464206e65772076657374656420656e7472696573206561726c696572207468616e20746865206c617374206f6e654d75737420626520656e6f7567682062616c616e636520696e2074686520636f6e747261637420746f2070726f7669646520666f72207468652076657374696e6720656e747279496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f6e6c792074686520466565506f6f6c20636f6e7472616374732063616e20706572666f726d207468697320616374696f6ea264697066735822122040fa25944c38aabb7903bce1b66acb429f49d765e27a2c0170694050b5ca380164736f6c63430007010033",
  "deployedBytecode": "",
  "libraries": {
    "SafeDecimalMath": "0xD4467753Eb04D2fE0C8BFF17c54Ba5332ee94E69"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "appendVestingEntry(address,uint256)": {
        "details": "A call to this should accompany a previous successful call to shadows.transfer(rewardEscrow, amount), to ensure that when the funds are withdrawn, there is enough balance. Note; although this function could technically be used to produce unbounded arrays, it's only withinn the 4 year period of the weekly inflation schedule.",
        "params": {
          "account": "The account to append a new vesting entry to.",
          "quantity": "The quantity of DOWS that will be escrowed."
        }
      },
      "checkAccountSchedule(address)": {
        "details": "For DApps to display the vesting schedule for the inflationary supply over 5 years. Solidity cant return variable length arrays so this is returning pairs of data. Vesting Time at [0] and quantity at [1] and so on"
      },
      "getNextVestingEntry(address)": {
        "returns": {
          "_0": "A pair of uints: (timestamp, shadows quantity). "
        }
      },
      "getVestingScheduleEntry(address,uint256)": {
        "returns": {
          "_0": "A pair of uints: (timestamp, shadows quantity)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "appendVestingEntry(address,uint256)": {
        "notice": "Add a new vesting entry at a given time and quantity to an account's schedule."
      },
      "checkAccountSchedule(address)": {
        "notice": "return the full vesting schedule entries vest for a given user."
      },
      "getNextVestingEntry(address)": {
        "notice": "Obtain the next schedule entry that will vest for a given user."
      },
      "getNextVestingIndex(address)": {
        "notice": "Obtain the index of the next schedule entry that will vest for a given user."
      },
      "getNextVestingQuantity(address)": {
        "notice": "Obtain the quantity which the next schedule entry will vest for a given user."
      },
      "getNextVestingTime(address)": {
        "notice": "Obtain the time at which the next schedule entry will vest for a given user."
      },
      "getVestingQuantity(address,uint256)": {
        "notice": "Get the quantity of DOWS associated with a given schedule entry."
      },
      "getVestingScheduleEntry(address,uint256)": {
        "notice": "Get a particular schedule entry for an account."
      },
      "getVestingTime(address,uint256)": {
        "notice": "Get the time at which a given schedule entry will vest."
      },
      "numVestingEntries(address)": {
        "notice": "The number of vesting dates in an account's schedule."
      },
      "vest()": {
        "notice": "Allow a user to withdraw any DOWS in their schedule that have vested."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 595,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 598,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1615,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9671,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "resolver",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(AddressResolver)9659"
      },
      {
        "astId": 6294,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_array(t_array(t_uint256)2_storage)dyn_storage)"
      },
      {
        "astId": 6298,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "totalEscrowedAccountBalance",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6302,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "totalVestedAccountBalance",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6304,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "totalEscrowedBalance",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 6317,
        "contract": "contracts/RewardEscrow.sol:RewardEscrow",
        "label": "vestingScheduleTime",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)2_storage)dyn_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "dynamic_array",
        "label": "uint256[2][]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressResolver)9659": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_array(t_uint256)2_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[2][])",
        "numberOfBytes": "32",
        "value": "t_array(t_array(t_uint256)2_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}