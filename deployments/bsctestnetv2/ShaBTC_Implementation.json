{
  "address": "0x3fb43535B633AC2984f7f2F3757Fd7a1BE2a6Cb7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Purged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "ResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_currencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "purge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferableSynths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e48105a97e3b35cea8a7352c3e194165fc85b5327126ce553d1c33facff5b61",
  "receipt": {
    "to": null,
    "from": "0x9143860b52ed23FEF5724ad975809e5C12E0334A",
    "contractAddress": "0x3fb43535B633AC2984f7f2F3757Fd7a1BE2a6Cb7",
    "transactionIndex": 0,
    "gasUsed": "1916405",
    "logsBloom": "0x
    "blockHash": "0x03e3c9ebac763eb1d7d6903326386265ac7bbda10bf14ae05b7048102a48e8c3",
    "transactionHash": "0x7e48105a97e3b35cea8a7352c3e194165fc85b5327126ce553d1c33facff5b61",
    "logs": [],
    "blockNumber": 13530285,
    "cumulativeGasUsed": "1916405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fba4edb38ebdf9b08a91a604814aac3c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"purge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferableSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Synth.sol\":\"Synth\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Synth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./library/AddressResolverUpgradeable.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/ISynthesizer.sol\\\";\\nimport \\\"./interfaces/IExchanger.sol\\\";\\n\\ncontract Synth is Initializable, OwnableUpgradeable, ERC20Upgradeable, AddressResolverUpgradeable {\\n\\n    bytes32 public currencyKey;\\n\\n    bytes32 private constant xUSD = \\\"ShaUSD\\\";\\n    function initialize(\\n        string calldata _tokenName,\\n        string calldata _tokenSymbol,\\n        bytes32 _currencyKey,\\n        address _resolver\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __AddressResolver_init(_resolver);\\n        currencyKey = _currencyKey;\\n    }\\n\\n    function transferableSynths(address account) public view returns (uint) {\\n        return balanceOf(account);\\n    }\\n\\n    function issue(address account, uint amount) external onlyInternalContracts {\\n        _mint(account, amount);\\n        emit Issued(account, amount);\\n    }\\n\\n    function burn(address account, uint amount) external onlyInternalContracts {\\n        _burn(account, amount);\\n        emit Burned(account, amount);\\n    }\\n\\n    function purge(address[] calldata addresses) external onlyOwner {\\n        for (uint i = 0; i < addresses.length; i++) {\\n            address holder = addresses[i];\\n\\n            uint amountHeld = balanceOf(holder);\\n\\n            if (amountHeld > 0) {\\n                exchanger().exchange(holder, currencyKey, amountHeld, xUSD, holder);\\n                emit Purged(holder, amountHeld);\\n            }\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n        if (recipient == feePool().FEE_ADDRESS()) {\\n            return _transferToFeeAddress(recipient, amount);\\n        }\\n\\n        if (recipient == address(0)) {\\n            return _burn(_msgSender(), amount);\\n        }\\n        return super._transfer(sender,recipient,amount);\\n    }\\n\\n    /**\\n     * non-xUSD synths are exchanged into xUSD via synthInitiatedExchange\\n     * notify feePool to record amount as fee paid to feePool \\n    */\\n    function _transferToFeeAddress(address recipient, uint amount) internal{\\n        uint amountInUSD;\\n\\n        if (currencyKey == xUSD) {\\n            amountInUSD = amount;\\n            super._transfer(_msgSender(), recipient, amount);\\n        } else {\\n            amountInUSD = exchanger().exchange(_msgSender(), currencyKey, amount, xUSD, feePool().FEE_ADDRESS());\\n        }\\n\\n        feePool().recordFeePaid(amountInUSD);\\n\\n        return;\\n    }\\n\\n    function synthesizer() internal view returns (ISynthesizer) {\\n        return ISynthesizer(resolver.requireAndGetAddress(\\\"Synthesizer\\\", \\\"Missing Synthesizer address\\\"));\\n    }\\n\\n    function feePool() internal view returns (IFeePool) {\\n        return IFeePool(resolver.requireAndGetAddress(\\\"FeePool\\\", \\\"Missing FeePool address\\\"));\\n    }\\n\\n    function exchanger() internal view returns (IExchanger) {\\n        return IExchanger(resolver.requireAndGetAddress(\\\"Exchanger\\\", \\\"Missing Exchanger address\\\"));\\n    }\\n\\n    modifier onlyInternalContracts() {\\n        bool isSynthesizer = msg.sender == address(synthesizer());\\n        bool isFeePool = msg.sender == address(feePool());\\n        bool isExchanger = msg.sender == address(exchanger());\\n\\n        require(\\n            isSynthesizer || isFeePool || isExchanger,\\n            \\\"Only Synthesizer, FeePool, Exchanger or Issuer contracts allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    event Issued(address indexed account, uint value);\\n\\n    event Burned(address indexed account, uint value);\\n\\n    event Purged(address indexed account, uint value);\\n}\\n\",\"keccak256\":\"0xf168ac9c2acb3ceb382e8a7a36aa51e247c243034096ea32bbd01ff15c690d00\",\"license\":\"MIT\"},\"contracts/interfaces/IExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\ninterface IExchanger {\\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\\n\\n    function settlementOwing(address account, bytes32 currencyKey)\\n        external\\n        view\\n        returns (uint reclaimAmount, uint rebateAmount);\\n\\n    function settle(address from, bytes32 currencyKey) external returns (uint reclaimed, uint refunded);\\n\\n    function exchange(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress\\n    ) external returns (uint amountReceived);\\n\\n    function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint amount, uint refunded)\\n        external\\n        view\\n        returns (uint amountAfterSettlement);\\n}\\n\",\"keccak256\":\"0xe7cbd68b24c9d7b023b5940ed3ffda9eb3cb60f239e49c6454785341f80e00d2\",\"license\":\"MI\"},\"contracts/interfaces/IFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @title FeePool Interface\\n */\\nabstract contract IFeePool {\\n\\n    address public FEE_ADDRESS;\\n    uint public exchangeFeeRate;\\n\\n    function amountReceivedFromExchange(uint value) virtual external view returns (uint);\\n\\n    function amountReceivedFromTransfer(uint value) virtual external view returns (uint);\\n\\n    function recordFeePaid(uint xUSDAmount) virtual external;\\n\\n    function recordRewardPaid(uint xUSDAmount) virtual external;\\n\\n    function appendAccountIssuanceRecord(address account, uint lockedAmount, uint debtEntryIndex) virtual external;\\n\\n    function setRewardsToDistribute(uint amount) virtual external;\\n}\\n\",\"keccak256\":\"0x1c880160c6a9f5eac13a853c127ca3f0f61d28d54a0e46c41b5f40ccfc79db49\",\"license\":\"MI\"},\"contracts/interfaces/ISynthesizer.sol\":{\"content\":\"// SPDX-License-Identifier: MI\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../Synth.sol\\\";\\n\\nabstract contract ISynthesizer {\\n    uint256 public totalSupply;\\n\\n    uint256 public issuanceRatio;\\n\\n    mapping(bytes32 => Synth) public synths;\\n\\n    mapping(address => bytes32) public synthsByAddress;\\n\\n    uint256[] public debtLedger;\\n\\n    function balanceOf(address account) external view virtual returns (uint256);\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        virtual\\n        returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external virtual returns (bool);\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external virtual returns (uint256 amountReceived);\\n\\n    function issueSynths(uint256 amount) external virtual;\\n\\n    function issueMaxSynths() external virtual;\\n\\n    function burnSynths(uint256 amount) external virtual;\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        virtual\\n        returns (uint256 reclaimed, uint256 refunded);\\n\\n    function collateralisationRatio(address issuer)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function totalIssuedSynths(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        virtual\\n        returns (uint256, uint256);\\n\\n    function isWaitingPeriod(bytes32 currencyKey)\\n        external\\n        view\\n        virtual\\n        returns (bool);\\n\\n    function debtLedgerLength() external view virtual returns (uint256);\\n\\n    function transferableShadows(address account)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function liquidateDelinquentAccount(\\n        address account,\\n        uint256 susdAmount,\\n        address liquidator\\n    )\\n        external\\n        virtual\\n        returns (uint256 totalRedeemed, uint256 amountToLiquidate);\\n}\\n\",\"keccak256\":\"0x1d641ec7084e8fe1d76c4aa59fc15c3c7ff9ccfe1130eeab61983a8284bc8e9c\",\"license\":\"MI\"},\"contracts/library/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) public onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n        for (uint i = 0; i < names.length; i++) {\\n            require(Address.isContract(destinations[i]), \\\"Must be contract address\\\");\\n            repository[names[i]] = destinations[i];\\n        }\\n    }\\n\\n    function getAddress(bytes32 name) public view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) public view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xc807a2e702f29215ea3ab06b849af2c24cc383c89812450108ef70a695259d8e\",\"license\":\"MIT\"},\"contracts/library/AddressResolverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./AddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract AddressResolverUpgradeable is Initializable, OwnableUpgradeable {\\n    AddressResolver public resolver;\\n\\n    function __AddressResolver_init(address _resolver) internal initializer {\\n        __Ownable_init();\\n        __AddressResolver_init_unchained(_resolver);\\n    }\\n\\n    function __AddressResolver_init_unchained(address _resolver)\\n        internal\\n        initializer\\n    {\\n        resolver = AddressResolver(_resolver);\\n    }\\n\\n    function setResolver(AddressResolver _resolver) public onlyOwner {\\n        resolver = _resolver;\\n        emit ResolverUpdated(_resolver);\\n    }\\n\\n    event ResolverUpdated(AddressResolver _resolver);\\n}\\n\",\"keccak256\":\"0x6f22f48a973a70e16f73edffd2a7f70cd93b8c6f5e79a0b93e7d2b73569079a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063867904b4116100b8578063a9059cbb1161007c578063a9059cbb1461047d578063ab593079146104a9578063dbd06c8514610519578063dd62ed3e14610521578063f2fde38b1461054f578063ffff51d61461057557610142565b8063867904b4146103e95780638da5cb5b1461041557806395d89b411461041d5780639dc29fac14610425578063a457c2d71461045157610142565b806323b872dd1161010a57806323b872dd14610315578063313ce5671461034b57806339509351146103695780634e543b261461039557806370a08231146103bb578063715018a6146103e157610142565b806304f3bcec1461014757806306fdde031461016b578063095ea7b3146101e8578063155f273b1461022857806318160ddd146102fb575b600080fd5b61014f61059b565b604080516001600160a01b039092168252519081900360200190f35b6101736105aa565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ad578181015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610214600480360360408110156101fe57600080fd5b506001600160a01b038135169060200135610640565b604080519115158252519081900360200190f35b6102f96004803603608081101561023e57600080fd5b81019060208101813564010000000081111561025957600080fd5b82018360208201111561026b57600080fd5b8035906020019184600183028401116401000000008311171561028d57600080fd5b9193909290916020810190356401000000008111156102ab57600080fd5b8201836020820111156102bd57600080fd5b803590602001918460018302840111640100000000831117156102df57600080fd5b9193509150803590602001356001600160a01b031661065d565b005b61030361078e565b60408051918252519081900360200190f35b6102146004803603606081101561032b57600080fd5b506001600160a01b03813581169160208101359091169060400135610794565b61035361081b565b6040805160ff9092168252519081900360200190f35b6102146004803603604081101561037f57600080fd5b506001600160a01b038135169060200135610824565b6102f9600480360360208110156103ab57600080fd5b50356001600160a01b0316610872565b610303600480360360208110156103d157600080fd5b50356001600160a01b0316610928565b6102f9610943565b6102f9600480360360408110156103ff57600080fd5b506001600160a01b0381351690602001356109ef565b61014f610aeb565b610173610afa565b6102f96004803603604081101561043b57600080fd5b506001600160a01b038135169060200135610b5b565b6102146004803603604081101561046757600080fd5b506001600160a01b038135169060200135610c57565b6102146004803603604081101561049357600080fd5b506001600160a01b038135169060200135610cbf565b6102f9600480360360208110156104bf57600080fd5b8101906020810181356401000000008111156104da57600080fd5b8201836020820111156104ec57600080fd5b8035906020019184602083028401116401000000008311171561050e57600080fd5b509092509050610cd3565b610303610e78565b6103036004803603604081101561053757600080fd5b506001600160a01b0381358116916020013516610e7e565b6102f96004803603602081101561056557600080fd5b50356001600160a01b0316610ea9565b6103036004803603602081101561058b57600080fd5b50356001600160a01b0316610fac565b6097546001600160a01b031681565b60688054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b5050505050905090565b600061065461064d610fbd565b8484610fc1565b50600192915050565b600054610100900460ff168061067657506106766110ad565b80610684575060005460ff16155b6106bf5760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156106ea576000805460ff1961ff0019909116610100171660011790555b6106f26110be565b61076587878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061117092505050565b61076e82611225565b60988390558015610785576000805461ff00191690555b50505050505050565b60675490565b60006107a18484846112d9565b610811846107ad610fbd565b61080c856040518060600160405280602881526020016120ab602891396001600160a01b038a166000908152606660205260408120906107eb610fbd565b6001600160a01b031681526020810191909152604001600020549190611391565b610fc1565b5060019392505050565b606a5460ff1690565b6000610654610831610fbd565b8461080c8560666000610842610fbd565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611428565b61087a610fbd565b6001600160a01b031661088b610aeb565b6001600160a01b0316146108d4576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b609780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f15cd6d20bba01b3fcb790c73829dd07412cbdf689ef818c96a2505889f3736a29181900360200190a150565b6001600160a01b031660009081526065602052604090205490565b61094b610fbd565b6001600160a01b031661095c610aeb565b6001600160a01b0316146109a5576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60006109f9611489565b6001600160a01b0316336001600160a01b03161490506000610a19611547565b6001600160a01b0316336001600160a01b03161490506000610a396115d0565b6001600160a01b0316336001600160a01b03161490508280610a585750815b80610a605750805b610a9b5760405162461bcd60e51b815260040180806020018281038252604081526020018061206b6040913960400191505060405180910390fd5b610aa5858561165b565b6040805185815290516001600160a01b038716917fa59f12e354e8cd10bb74c559844c2dd69a5458e31fe56c7594c62ca57480509a919081900360200190a25050505050565b6033546001600160a01b031690565b60698054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106365780601f1061060b57610100808354040283529160200191610636565b6000610b65611489565b6001600160a01b0316336001600160a01b03161490506000610b85611547565b6001600160a01b0316336001600160a01b03161490506000610ba56115d0565b6001600160a01b0316336001600160a01b03161490508280610bc45750815b80610bcc5750805b610c075760405162461bcd60e51b815260040180806020018281038252604081526020018061206b6040913960400191505060405180910390fd5b610c11858561174d565b6040805185815290516001600160a01b038716917f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7919081900360200190a25050505050565b6000610654610c64610fbd565b8461080c8560405180606001604052806025815260200161215d6025913960666000610c8e610fbd565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611391565b6000610654610ccc610fbd565b84846112d9565b610cdb610fbd565b6001600160a01b0316610cec610aeb565b6001600160a01b031614610d35576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b60005b81811015610e73576000838383818110610d4e57fe5b905060200201356001600160a01b031690506000610d6b82610928565b90508015610e6957610d7b6115d0565b6001600160a01b0316630a1e187d83609854846514da185554d160d21b876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001838152602001826001600160a01b0316815260200195505050505050602060405180830381600087803b158015610dfd57600080fd5b505af1158015610e11573d6000803e3d6000fd5b505050506040513d6020811015610e2757600080fd5b50506040805182815290516001600160a01b038416917f265db6c9c62cb962adbcf4398a54e4b02b2d87b28ab5b7538850150465a5f43c919081900360200190a25b5050600101610d38565b505050565b60985481565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b610eb1610fbd565b6001600160a01b0316610ec2610aeb565b6001600160a01b031614610f0b576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b6001600160a01b038116610f505760405162461bcd60e51b8152600401808060200182810382526026815260200180611fcf6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610fb782610928565b92915050565b3390565b6001600160a01b0383166110065760405162461bcd60e51b81526004018080602001828103825260248152602001806121396024913960400191505060405180910390fd5b6001600160a01b03821661104b5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ff56022913960400191505060405180910390fd5b6001600160a01b03808416600081815260666020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006110b830611849565b15905090565b600054610100900460ff16806110d757506110d76110ad565b806110e5575060005460ff16155b6111205760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561114b576000805460ff1961ff0019909116610100171660011790555b61115361184f565b61115b6118ef565b801561116d576000805461ff00191690555b50565b600054610100900460ff168061118957506111896110ad565b80611197575060005460ff16155b6111d25760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156111fd576000805460ff1961ff0019909116610100171660011790555b61120561184f565b61120f83836119e8565b8015610e73576000805461ff0019169055505050565b600054610100900460ff168061123e575061123e6110ad565b8061124c575060005460ff16155b6112875760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156112b2576000805460ff1961ff0019909116610100171660011790555b6112ba6110be565b6112c382611ac0565b80156112d5576000805461ff00191690555b5050565b6112e1611547565b6001600160a01b031663eb1edd616040518163ffffffff1660e01b815260040160206040518083038186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b50516001600160a01b0383811691161415611367576113628282611b7d565b610e73565b6001600160a01b03821661138657611362611380610fbd565b8261174d565b610e73838383611d3c565b600081848411156114205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e55781810151838201526020016113cd565b50505050905090810190601f1680156114125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611482576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6097546040805163dacb2d0160e01b81526a29bcb73a3432b9b4bd32b960a91b600482015260248101829052601b60448201527f4d697373696e672053796e74686573697a657220616464726573730000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d602081101561154057600080fd5b5051905090565b6097546040805163dacb2d0160e01b815266119959541bdbdb60ca1b600482015260248101829052601760448201527f4d697373696e6720466565506f6f6c2061646472657373000000000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b6097546040805163dacb2d0160e01b81526822bc31b430b733b2b960b91b600482015260248101829052601960448201527f4d697373696e672045786368616e676572206164647265737300000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b6001600160a01b0382166116b6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6116c260008383610e73565b6067546116cf9082611428565b6067556001600160a01b0382166000908152606560205260409020546116f59082611428565b6001600160a01b03831660008181526065602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166117925760405162461bcd60e51b81526004018080602001828103825260218152602001806120f36021913960400191505060405180910390fd5b61179e82600083610e73565b6117db81604051806060016040528060228152602001611fad602291396001600160a01b0385166000908152606560205260409020549190611391565b6001600160a01b0383166000908152606560205260409020556067546118019082611e99565b6067556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b3b151590565b600054610100900460ff168061186857506118686110ad565b80611876575060005460ff16155b6118b15760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561115b576000805460ff1961ff001990911661010017166001179055801561116d576000805461ff001916905550565b600054610100900460ff168061190857506119086110ad565b80611916575060005460ff16155b6119515760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561197c576000805460ff1961ff0019909116610100171660011790555b6000611986610fbd565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561116d576000805461ff001916905550565b600054610100900460ff1680611a015750611a016110ad565b80611a0f575060005460ff16155b611a4a5760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff16158015611a75576000805460ff1961ff0019909116610100171660011790555b8251611a88906068906020860190611ef6565b508151611a9c906069906020850190611ef6565b50606a805460ff191660121790558015610e73576000805461ff0019169055505050565b600054610100900460ff1680611ad95750611ad96110ad565b80611ae7575060005460ff16155b611b225760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff16158015611b4d576000805460ff1961ff0019909116610100171660011790555b609780546001600160a01b0319166001600160a01b03841617905580156112d5576000805461ff00191690555050565b60006514da185554d160d21b6098541415611bab575080611ba6611b9f610fbd565b8484611d3c565b611cdb565b611bb36115d0565b6001600160a01b0316630a1e187d611bc9610fbd565b609854856514da185554d160d21b611bdf611547565b6001600160a01b031663eb1edd616040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1757600080fd5b505afa158015611c2b573d6000803e3d6000fd5b505050506040513d6020811015611c4157600080fd5b5051604080516001600160e01b031960e089901b1681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152929092166084820152905160a48083019260209291908290030181600087803b158015611cac57600080fd5b505af1158015611cc0573d6000803e3d6000fd5b505050506040513d6020811015611cd657600080fd5b505190505b611ce3611547565b6001600160a01b03166322bf55ef826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611d2857600080fd5b505af1158015610785573d6000803e3d6000fd5b6001600160a01b038316611d815760405162461bcd60e51b81526004018080602001828103825260258152602001806121146025913960400191505060405180910390fd5b6001600160a01b038216611dc65760405162461bcd60e51b8152600401808060200182810382526023815260200180611f8a6023913960400191505060405180910390fd5b611dd1838383610e73565b611e0e81604051806060016040528060268152602001612017602691396001600160a01b0386166000908152606560205260409020549190611391565b6001600160a01b038085166000908152606560205260408082209390935590841681522054611e3d9082611428565b6001600160a01b0380841660008181526065602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115611ef0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f3757805160ff1916838001178555611f64565b82800160010185558215611f64579182015b82811115611f64578251825591602001919060010190611f49565b50611f70929150611f74565b5090565b5b80821115611f705760008155600101611f7556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f6e6c792053796e74686573697a65722c20466565506f6f6c2c2045786368616e676572206f722049737375657220636f6e74726163747320616c6c6f77656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212208302ba12004c3df88b5f1c7e8d3d6f497e6672a5623904fc256272bde85878d564736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063867904b4116100b8578063a9059cbb1161007c578063a9059cbb1461047d578063ab593079146104a9578063dbd06c8514610519578063dd62ed3e14610521578063f2fde38b1461054f578063ffff51d61461057557610142565b8063867904b4146103e95780638da5cb5b1461041557806395d89b411461041d5780639dc29fac14610425578063a457c2d71461045157610142565b806323b872dd1161010a57806323b872dd14610315578063313ce5671461034b57806339509351146103695780634e543b261461039557806370a08231146103bb578063715018a6146103e157610142565b806304f3bcec1461014757806306fdde031461016b578063095ea7b3146101e8578063155f273b1461022857806318160ddd146102fb575b600080fd5b61014f61059b565b604080516001600160a01b039092168252519081900360200190f35b6101736105aa565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ad578181015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610214600480360360408110156101fe57600080fd5b506001600160a01b038135169060200135610640565b604080519115158252519081900360200190f35b6102f96004803603608081101561023e57600080fd5b81019060208101813564010000000081111561025957600080fd5b82018360208201111561026b57600080fd5b8035906020019184600183028401116401000000008311171561028d57600080fd5b9193909290916020810190356401000000008111156102ab57600080fd5b8201836020820111156102bd57600080fd5b803590602001918460018302840111640100000000831117156102df57600080fd5b9193509150803590602001356001600160a01b031661065d565b005b61030361078e565b60408051918252519081900360200190f35b6102146004803603606081101561032b57600080fd5b506001600160a01b03813581169160208101359091169060400135610794565b61035361081b565b6040805160ff9092168252519081900360200190f35b6102146004803603604081101561037f57600080fd5b506001600160a01b038135169060200135610824565b6102f9600480360360208110156103ab57600080fd5b50356001600160a01b0316610872565b610303600480360360208110156103d157600080fd5b50356001600160a01b0316610928565b6102f9610943565b6102f9600480360360408110156103ff57600080fd5b506001600160a01b0381351690602001356109ef565b61014f610aeb565b610173610afa565b6102f96004803603604081101561043b57600080fd5b506001600160a01b038135169060200135610b5b565b6102146004803603604081101561046757600080fd5b506001600160a01b038135169060200135610c57565b6102146004803603604081101561049357600080fd5b506001600160a01b038135169060200135610cbf565b6102f9600480360360208110156104bf57600080fd5b8101906020810181356401000000008111156104da57600080fd5b8201836020820111156104ec57600080fd5b8035906020019184602083028401116401000000008311171561050e57600080fd5b509092509050610cd3565b610303610e78565b6103036004803603604081101561053757600080fd5b506001600160a01b0381358116916020013516610e7e565b6102f96004803603602081101561056557600080fd5b50356001600160a01b0316610ea9565b6103036004803603602081101561058b57600080fd5b50356001600160a01b0316610fac565b6097546001600160a01b031681565b60688054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106365780601f1061060b57610100808354040283529160200191610636565b820191906000526020600020905b81548152906001019060200180831161061957829003601f168201915b5050505050905090565b600061065461064d610fbd565b8484610fc1565b50600192915050565b600054610100900460ff168061067657506106766110ad565b80610684575060005460ff16155b6106bf5760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156106ea576000805460ff1961ff0019909116610100171660011790555b6106f26110be565b61076587878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525061117092505050565b61076e82611225565b60988390558015610785576000805461ff00191690555b50505050505050565b60675490565b60006107a18484846112d9565b610811846107ad610fbd565b61080c856040518060600160405280602881526020016120ab602891396001600160a01b038a166000908152606660205260408120906107eb610fbd565b6001600160a01b031681526020810191909152604001600020549190611391565b610fc1565b5060019392505050565b606a5460ff1690565b6000610654610831610fbd565b8461080c8560666000610842610fbd565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611428565b61087a610fbd565b6001600160a01b031661088b610aeb565b6001600160a01b0316146108d4576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b609780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f15cd6d20bba01b3fcb790c73829dd07412cbdf689ef818c96a2505889f3736a29181900360200190a150565b6001600160a01b031660009081526065602052604090205490565b61094b610fbd565b6001600160a01b031661095c610aeb565b6001600160a01b0316146109a5576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60006109f9611489565b6001600160a01b0316336001600160a01b03161490506000610a19611547565b6001600160a01b0316336001600160a01b03161490506000610a396115d0565b6001600160a01b0316336001600160a01b03161490508280610a585750815b80610a605750805b610a9b5760405162461bcd60e51b815260040180806020018281038252604081526020018061206b6040913960400191505060405180910390fd5b610aa5858561165b565b6040805185815290516001600160a01b038716917fa59f12e354e8cd10bb74c559844c2dd69a5458e31fe56c7594c62ca57480509a919081900360200190a25050505050565b6033546001600160a01b031690565b60698054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106365780601f1061060b57610100808354040283529160200191610636565b6000610b65611489565b6001600160a01b0316336001600160a01b03161490506000610b85611547565b6001600160a01b0316336001600160a01b03161490506000610ba56115d0565b6001600160a01b0316336001600160a01b03161490508280610bc45750815b80610bcc5750805b610c075760405162461bcd60e51b815260040180806020018281038252604081526020018061206b6040913960400191505060405180910390fd5b610c11858561174d565b6040805185815290516001600160a01b038716917f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7919081900360200190a25050505050565b6000610654610c64610fbd565b8461080c8560405180606001604052806025815260200161215d6025913960666000610c8e610fbd565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611391565b6000610654610ccc610fbd565b84846112d9565b610cdb610fbd565b6001600160a01b0316610cec610aeb565b6001600160a01b031614610d35576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b60005b81811015610e73576000838383818110610d4e57fe5b905060200201356001600160a01b031690506000610d6b82610928565b90508015610e6957610d7b6115d0565b6001600160a01b0316630a1e187d83609854846514da185554d160d21b876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001838152602001826001600160a01b0316815260200195505050505050602060405180830381600087803b158015610dfd57600080fd5b505af1158015610e11573d6000803e3d6000fd5b505050506040513d6020811015610e2757600080fd5b50506040805182815290516001600160a01b038416917f265db6c9c62cb962adbcf4398a54e4b02b2d87b28ab5b7538850150465a5f43c919081900360200190a25b5050600101610d38565b505050565b60985481565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b610eb1610fbd565b6001600160a01b0316610ec2610aeb565b6001600160a01b031614610f0b576040805162461bcd60e51b815260206004820181905260248201526000805160206120d3833981519152604482015290519081900360640190fd5b6001600160a01b038116610f505760405162461bcd60e51b8152600401808060200182810382526026815260200180611fcf6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610fb782610928565b92915050565b3390565b6001600160a01b0383166110065760405162461bcd60e51b81526004018080602001828103825260248152602001806121396024913960400191505060405180910390fd5b6001600160a01b03821661104b5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ff56022913960400191505060405180910390fd5b6001600160a01b03808416600081815260666020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006110b830611849565b15905090565b600054610100900460ff16806110d757506110d76110ad565b806110e5575060005460ff16155b6111205760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561114b576000805460ff1961ff0019909116610100171660011790555b61115361184f565b61115b6118ef565b801561116d576000805461ff00191690555b50565b600054610100900460ff168061118957506111896110ad565b80611197575060005460ff16155b6111d25760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156111fd576000805460ff1961ff0019909116610100171660011790555b61120561184f565b61120f83836119e8565b8015610e73576000805461ff0019169055505050565b600054610100900460ff168061123e575061123e6110ad565b8061124c575060005460ff16155b6112875760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff161580156112b2576000805460ff1961ff0019909116610100171660011790555b6112ba6110be565b6112c382611ac0565b80156112d5576000805461ff00191690555b5050565b6112e1611547565b6001600160a01b031663eb1edd616040518163ffffffff1660e01b815260040160206040518083038186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b50516001600160a01b0383811691161415611367576113628282611b7d565b610e73565b6001600160a01b03821661138657611362611380610fbd565b8261174d565b610e73838383611d3c565b600081848411156114205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e55781810151838201526020016113cd565b50505050905090810190601f1680156114125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015611482576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6097546040805163dacb2d0160e01b81526a29bcb73a3432b9b4bd32b960a91b600482015260248101829052601b60448201527f4d697373696e672053796e74686573697a657220616464726573730000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d602081101561154057600080fd5b5051905090565b6097546040805163dacb2d0160e01b815266119959541bdbdb60ca1b600482015260248101829052601760448201527f4d697373696e6720466565506f6f6c2061646472657373000000000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b6097546040805163dacb2d0160e01b81526822bc31b430b733b2b960b91b600482015260248101829052601960448201527f4d697373696e672045786368616e676572206164647265737300000000000000606482015290516000926001600160a01b03169163dacb2d01916084808301926020929190829003018186803b15801561151657600080fd5b6001600160a01b0382166116b6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6116c260008383610e73565b6067546116cf9082611428565b6067556001600160a01b0382166000908152606560205260409020546116f59082611428565b6001600160a01b03831660008181526065602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166117925760405162461bcd60e51b81526004018080602001828103825260218152602001806120f36021913960400191505060405180910390fd5b61179e82600083610e73565b6117db81604051806060016040528060228152602001611fad602291396001600160a01b0385166000908152606560205260409020549190611391565b6001600160a01b0383166000908152606560205260409020556067546118019082611e99565b6067556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b3b151590565b600054610100900460ff168061186857506118686110ad565b80611876575060005460ff16155b6118b15760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561115b576000805460ff1961ff001990911661010017166001179055801561116d576000805461ff001916905550565b600054610100900460ff168061190857506119086110ad565b80611916575060005460ff16155b6119515760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff1615801561197c576000805460ff1961ff0019909116610100171660011790555b6000611986610fbd565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561116d576000805461ff001916905550565b600054610100900460ff1680611a015750611a016110ad565b80611a0f575060005460ff16155b611a4a5760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff16158015611a75576000805460ff1961ff0019909116610100171660011790555b8251611a88906068906020860190611ef6565b508151611a9c906069906020850190611ef6565b50606a805460ff191660121790558015610e73576000805461ff0019169055505050565b600054610100900460ff1680611ad95750611ad96110ad565b80611ae7575060005460ff16155b611b225760405162461bcd60e51b815260040180806020018281038252602e81526020018061203d602e913960400191505060405180910390fd5b600054610100900460ff16158015611b4d576000805460ff1961ff0019909116610100171660011790555b609780546001600160a01b0319166001600160a01b03841617905580156112d5576000805461ff00191690555050565b60006514da185554d160d21b6098541415611bab575080611ba6611b9f610fbd565b8484611d3c565b611cdb565b611bb36115d0565b6001600160a01b0316630a1e187d611bc9610fbd565b609854856514da185554d160d21b611bdf611547565b6001600160a01b031663eb1edd616040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1757600080fd5b505afa158015611c2b573d6000803e3d6000fd5b505050506040513d6020811015611c4157600080fd5b5051604080516001600160e01b031960e089901b1681526001600160a01b039687166004820152602481019590955260448501939093526064840191909152929092166084820152905160a48083019260209291908290030181600087803b158015611cac57600080fd5b505af1158015611cc0573d6000803e3d6000fd5b505050506040513d6020811015611cd657600080fd5b505190505b611ce3611547565b6001600160a01b03166322bf55ef826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611d2857600080fd5b505af1158015610785573d6000803e3d6000fd5b6001600160a01b038316611d815760405162461bcd60e51b81526004018080602001828103825260258152602001806121146025913960400191505060405180910390fd5b6001600160a01b038216611dc65760405162461bcd60e51b8152600401808060200182810382526023815260200180611f8a6023913960400191505060405180910390fd5b611dd1838383610e73565b611e0e81604051806060016040528060268152602001612017602691396001600160a01b0386166000908152606560205260409020549190611391565b6001600160a01b038085166000908152606560205260408082209390935590841681522054611e3d9082611428565b6001600160a01b0380841660008181526065602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115611ef0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f3757805160ff1916838001178555611f64565b82800160010185558215611f64579182015b82811115611f64578251825591602001919060010190611f49565b50611f70929150611f74565b5090565b5b80821115611f705760008155600101611f7556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f6e6c792053796e74686573697a65722c20466565506f6f6c2c2045786368616e676572206f722049737375657220636f6e74726163747320616c6c6f77656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212208302ba12004c3df88b5f1c7e8d3d6f497e6672a5623904fc256272bde85878d564736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 595,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 598,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1615,
        "contract": "contracts/Synth.sol:Synth",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 113,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/Synth.sol:Synth",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 739,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 745,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 747,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 749,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 751,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 753,
        "contract": "contracts/Synth.sol:Synth",
        "label": "_decimals",
        "offset": 0,
        "slot": "106",
        "type": "t_uint8"
      },
      {
        "astId": 1248,
        "contract": "contracts/Synth.sol:Synth",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 9671,
        "contract": "contracts/Synth.sol:Synth",
        "label": "resolver",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(AddressResolver)9659"
      },
      {
        "astId": 7222,
        "contract": "contracts/Synth.sol:Synth",
        "label": "currencyKey",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AddressResolver)9659": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}